#############################################################
# Alarm automations
#############################################################

# Notify Toyota movement if I'm not in the car
- alias: 'Notify Toyota movement if I am not in the car'
  trigger:
    platform: numeric_state
    entity_id: sensor.toyota_distance_travelled_between_updates
    above: 50
    for:
      seconds: 30
  condition:
    condition: template
    value_template: '{{ states.device_tracker.jordi_combined.state != "En ruta" }}'
  action:
    - service: notify.telegram
      data_template:
        message: 'Movimiento del Toyota de unos {{ sensor.toyota_distance_travelled_between_updates.state }} metros detectado'
    - service: telegram_bot.send_location
      data_template:
        latitude: '{{ states.device_tracker.toyota.attributes.latitude }}'
        longitude: '{{ states.device_tracker.toyota.attributes.longitude }}'
        target: !secret hokusphone_telegram_chat_id

#############################################################
# Light automations
#############################################################

# When turn on outside lights, adjust brightness
- alias: 'Luces exteriores on turn on - Adjust Brightness'
  trigger:
    platform: state
    entity_id: group.luces_exteriores
    to: 'on'
  action:
    - service: homeassistant.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((states.input_number.entrada_luz_brillo.state | int) * 255) // 100 }}'

# Adjust luces exteriores brightness
- alias: 'Luces exteriores - Adjust Brightness'
  trigger:
    platform: state
    entity_id: input_number.entrada_luz_brillo
  condition:
    condition: state
    entity_id: group.luces_exteriores
    state: 'on'
  action:
    - service: homeassistant.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((trigger.to_state.state | int) * 255) // 100 }}'

# Turn on outside lights at sunset (+15 minutes)
- alias: 'Sunset Lights'
  trigger:
    platform: sun
    event: 'sunset'
    offset: '00:15:00'
  action:
    - service: homeassistant.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((states.input_number.entrada_luz_brillo.state | int) * 255) // 100 }}'
    - service: logbook.log
      data:
        name: 'Luces exteriores'
        message: 'encendidas por la puesta de sol'
        entity_id: group.luces_exteriores
        domain: light

# Turn off outside lights at night (at 00:15)
- alias: 'Turn off lights at night'
  trigger:
    platform: time
    at: '00:15'
  condition:
    condition: state
    entity_id: group.luces_exteriores
    state: 'on'
  action:
    - service: homeassistant.turn_off
      entity_id: group.luces_exteriores
    - service: logbook.log
      data:
        name: 'Luces exteriores'
        message: 'apagadas a las 00:15'
        entity_id: group.luces_exteriores
        domain: light

# When the outside lights have been turned on at late night (later than 00:15) and before sunrise, turn them off after 5 minutes
- alias: 'Turn off lights at late night'
  trigger:
    platform: state
    entity_id: group.luces_exteriores
    to: 'on'
  condition:
    - condition: time
      after: '00:15'
    - condition: sun
      before: sunrise
    - condition: state
      entity_id: group.luces_exteriores
      state: 'on'
  action:
    - delay:
        minutes: 5
    - service: homeassistant.turn_off
      data:
        entity_id: group.luces_exteriores
    - service: logbook.log
      data:
        name: 'Luces exteriores'
        message: 'apagadas más tarde de las 00:15'
        entity_id: group.luces_exteriores
        domain: light


# Turn off outside lights after 10 seconds when the sun is not set
- alias: 'Turn off lights when sun not set'
  trigger:
    platform: state
    entity_id: group.luces_exteriores
    to: 'on'
  condition:
    condition: or
    conditions:
    - condition: sun
      after: sunset
    - condition: sun
      before: sunrise
  action:
    - delay:
        seconds: 10
    - service: homeassistant.turn_off
      data:
        entity_id: group.luces_exteriores
    - service: logbook.log
      data:
        name: 'Luces exteriores'
        message: 'apagadas porque es de dia'
        entity_id: group.luces_exteriores
        domain: light

# Turn on outside lights when fence is opened and the sun is set.
- alias: 'Turn on lights when fence open'
  trigger:
    platform: state
    entity_id: sensor.switch_barrera
    to: 'Abierta'
  condition:
    condition: or
    conditions:
    - condition: sun
      after: sunset
    - condition: sun
      before: sunrise
  action:
    - service: homeassistant.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((states.input_number.entrada_luz_brillo.state | int) * 255) // 100 }}'
    - service: logbook.log
      data:
        name: 'Luces exteriores'
        message: 'encendidas porque se ha abierto la barrera y es de noche'
        entity_id: group.luces_exteriores
        domain: light

# Turn on hall lamp when the sun is set and someone at home
- alias: 'Turn on hall lamp when the sun is set and someone at home'
  trigger:
    platform: sun
    event: sunset
  condition:
    condition: state
    entity_id: group.unidad_familiar
    state: 'home'
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.swiid_swiidinter_lampara_recibidor_switch

#############################################################
# Power automations
#############################################################

# Notify when a power cut longer than 1 minute detected
- alias: 'Notify power cut'
  trigger:
    platform: state
    entity_id: binary_sensor.ups_status_bs
    to: 'off'
    for:
      minutes: 1
  action:
    - service: notify.telegram
      data:
        message: 'Corte en el suministro eléctrico detectado'

# Restart UPS driver controller when a power cut is detected.
# I've added this automation because from time to time the controller stops working until it's restarted.
- alias: 'Restart UPS Driver Controller'
  trigger:
    platform: state
    entity_id: binary_sensor.ups_status_bs
    to: 'off'
  condition:
    - condition: numeric_state
      entity_id: sensor.ha_runtime_in_minutes
      above: 2
  action:
    - service: notify.telegram
      data:
        message: 'Controlador SAI reiniciado'
    - service: shell_command.restart_ups_driver_controller

# Notify when the power is back normal
- alias: 'Notify power ok'
  trigger:
    platform: state
    entity_id: binary_sensor.ups_status_bs
    to: 'on'
  condition:
    - condition: numeric_state
      entity_id: sensor.ha_runtime_in_minutes
      above: 2
  action:
    service: notify.telegram
    data:
      message: 'Suministro eléctrico reestablecido'

# Notify when the UPS battery has to be replaced
- alias: 'Notify ups battery replacement'
  trigger:
    platform: state
    entity_id: sensor.ups_status
    to: 'Reemplazar batería'
  action:
    service: notify.telegram
    data:
      message: 'Batería del SAI agotándose, reemplazar'

#############################################################
# Laundry door automations
#############################################################
- alias: 'When laundry door is open and heating is on, notify every 10 minutes'
  trigger:
    platform: time
    minutes: '/1'
    seconds: 00
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.coladuria_sensor_puerta
        state: 'on'
      - condition: state
        entity_id: switch.termostato
        state: 'on'
      - condition: template
        value_template: '{{ ((as_timestamp(now()) - as_timestamp(states.binary_sensor.coladuria_sensor_puerta.last_changed))//60)%10 == 0 }}'
      - condition: template
        value_template: '{{ ((as_timestamp(now()) - as_timestamp(states.binary_sensor.coladuria_sensor_puerta.last_changed))//60) != 0 }}'
  action:
    - service: script.turn_on
      data:
        entity_id: script.speech_set_tts_volume_level
    - service: tts.google_say
      entity_id: media_player.homeassistant
      data_template:
        message: 'Puerta de la coladuría abierta durante más de {{ (as_timestamp(now()) - as_timestamp(states.binary_sensor.coladuria_sensor_puerta.last_changed))|int//60 }} minutos'
        cache: false

#############################################################
# Other automations
#############################################################
- alias: 'Notify bitcoin price above threshold'
  trigger:
    platform: numeric_state
    entity_id: sensor.exchange_rate_1_btc
    above: 50000
  action:
    service: notify.telegram
    data_template:
      message: 'Bitcoin ha llegado a un valor de {{states.sensor.exchange_rate_1_btc.state}} {{states.sensor.exchange_rate_1_btc.attributes.unit_of_measurement}}'

- alias: 'Update Notification'
  trigger:
    - platform: state
      entity_id: updater.updater
  action:
    - service: notify.telegram
      data_template:
        message: 'Nueva versión {{ states.updater.updater.state }} de Home Assistant disponible.'

- alias: 'Prevent overcharging'
  trigger:
    - platform: numeric_state
      entity_id: sensor.hokuslaptop_powerused
      below: 2
      for: '00:05:00'
  condition:
    - condition: state
      entity_id: switch.hokuslaptop
      state: 'on'
  action:
     service: switch.turn_off
     data:
       entity_id: switch.hokuslaptop
       
#############################################################
# Nodon Octan automations
#############################################################
- alias: Nodon Octan button 1 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 10
  action:
    - service: script.turn_on
      data:
        entity_id: script.presence_leave_home

- alias: Nodon Octan button 2 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 20
  action:
    - service: script.turn_on
      data:
        entity_id: script.parte_meteorologico_corto

#- alias: Nodon Octan button 2 long press
#  trigger:
#    platform: event
#    event_type: zwave.scene_activated
#    event_data:
#      entity_id: zwave.nodon_crc3100_octan_remote
#      scene_id: 21
#  action:
#    - service: script.turn_on
#      data:
#        entity_id: script.parte_meteorologico

- alias: Nodon Octan button 2 double click
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 23
  action:
    - service: script.turn_on
      data:
        entity_id: script.parte_meteorologico

- alias: Nodon Octan button 3 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 30
  action:
    - service: switch.turn_off
      data:
        entity_id: group.luces_interiores

- alias: Nodon Octan button 4 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 40
  action:
    - service: script.turn_on
      data:
        entity_id: script.goto_sleep

- alias: Nodon Octan button 4 long press
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 41
  action:
    - service: script.turn_on
      data:
        entity_id: script.presence_jordi_at_home

- alias: Nodon Octan button 4 double click
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 43
  action:
    - service: script.turn_on
      data:
        entity_id: script.presence_set_virtual_device_home

#############################################################
# Ifttt automations
#############################################################
- alias: 'Call service from ifttt'
  trigger:
    platform: event
    event_type: ifttt_webhook_received
    event_data:
      action: call_service
  action:
    service_template: '{{ trigger.event.data.service }}'
    data_template:
      entity_id: '{{ trigger.event.data.entity_id }}'

#############################################################
# Telegram automations
#############################################################
# Telegram bot that executes a service from a callback with the format <service>#<entity_id>. i.e.: script.turn_on#script.fence_close
# It also removes the buttons from original message.
- alias: 'Telegram bot that executes a service'
  hide_entity: true
  trigger:
    - platform: event
      event_type: telegram_callback
  condition:
    # Run only in case it has a # in the event data
    condition: template
    value_template: '{{ trigger.event.data.data.find("#") != -1 }}'
  action:
    # Answer callback
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: '{{ trigger.event.data.id }}'
        message: 'Respuesta recibida!'
        show_alert: false
    # Remove inline keyboard from original message.
    - service: telegram_bot.edit_replymarkup
      data_template:
             message_id: '{{ trigger.event.data.message.message_id }}'
             chat_id: '{{ trigger.event.data.chat_id }}'
             inline_keyboard: []
    # Execute service with the format <service>#<entity_id>.
    # If the service or the entity id don't exist, the execution will silently fail
    - service_template: >
        {%- if trigger.event.data.data.find("#") != -1 -%}
          {{trigger.event.data.data[1:trigger.event.data.data.find("#")]}}
        {%- endif -%}

      data_template:
        entity_id: '{{trigger.event.data.data[trigger.event.data.data.find("#")+1:]}}'
#############################################################
# Swarm automations
#############################################################

## Check in at school
#- alias: 'Checkin at Colegio'
#  trigger:
#    platform: zone
#    entity_id: device_tracker.jordi_combined
#    zone: zone.colegio
#    event: enter
#  action:
#    service: foursquare.checkin
#    data:
#      venueId: !secret foursquare_colegio_venue_id
## Check in at oficina
#- alias: 'Checkin at Oficina'
#  trigger:
#    platform: zone
#    entity_id: device_tracker.jordi_combined
#    zone: zone.colegio
#    event: enter
#  action:
#    service: foursquare.checkin
#    data:
#      venueId: !secret foursquare_office_venue_id
