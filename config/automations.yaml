#############################################################
# Other automations
#############################################################
- alias: '[None] Notify bitcoin price above threshold'
  trigger:
    platform: numeric_state
    entity_id: sensor.exchange_rate_1_btc
    above: 10000
  action:
    - service: notify.telegram
      data_template:
        message: 'Bitcoin ha llegado a un valor de {{states.sensor.exchange_rate_1_btc.state}} {{states.sensor.exchange_rate_1_btc.attributes.unit_of_measurement}}'
    - service: notify.slack
      data_template:
        message: ''
        data:
          attachments:
            - color: 'good'
              pretext: ':euro: *Inversiones* :euro:'
              text: 'Bitcoin ha llegado a un valor de {{states.sensor.exchange_rate_1_btc.state}} {{states.sensor.exchange_rate_1_btc.attributes.unit_of_measurement}}'
              fallback: 'Inversiones'

- alias: 'Update Notification'
  trigger:
    - platform: state
      entity_id: updater.updater
  action:
    - service: notify.telegram
      data_template:
        message: 'Nueva versión {{ states.updater.updater.state }} de Home Assistant disponible.'
    - service: notify.slack
      data_template:
        message: ''
        data:
          attachments:
            - color: '#439FE0'
              pretext: ':house_with_garden: *Home-Assistant* :house_with_garden:'
              text: 'Nueva versión {{ states.updater.updater.state }} de Home Assistant disponible.'
              fallback: 'Home-Assistant'

#- alias: 'Prevent overcharging'
#  trigger:
#    - platform: numeric_state
#      entity_id: sensor.hokuslaptop_powerused
#      below: 2
#      for: '00:05:00'
#  condition:
#    - condition: state
#      entity_id: switch.hokuslaptop
#      state: 'on'
#  action:
#     service: switch.turn_off
#     data:
#       entity_id: switch.hokuslaptop

- alias: '[None] Sleep mode event received'
  trigger:
    platform: event
    event_type: sleep_mode
  action:
    - service: logbook.log
      data:
        name: 'Modo nocturno'
        message: 'es hora de irse a dormir'
    - service: script.turn_on
      data:
        entity_id: script.goto_sleep

- alias: '[None] Daily Backup at 3 AM'
  trigger:
    platform: time
    at: '3:00:00'
  action:
  - service: hassio.snapshot_full
    data_template:
      name: Auto {{ now().strftime('%Y-%m-%d') }}
  - service: notify.slack
    data_template:
      message: ''
      data:
        attachments:
          - color: 'danger'
            pretext: ':floppy_disk: *Copia seguridad* :floppy_disk:'
            text: 'Copia de seguridad [Auto {{ now().strftime("%Y-%m-%d") }}] creada'
            fallback: 'Copia seguridad'

#############################################################
# Nodon Octan automations
#############################################################
- alias: '[None] Nodon Octan button 1 pressed'
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 10
  action:
    - service: script.turn_on
      data:
        entity_id: script.presence_leave_home

- alias: '[None] Nodon Octan button 2 pressed'
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 20
  action:
    - service: script.turn_on
      data:
        entity_id: script.parte_meteorologico_corto

#- alias: '[None] Nodon Octan button 2 long press'
#  trigger:
#    platform: event
#    event_type: zwave.scene_activated
#    event_data:
#      entity_id: zwave.nodon_crc3100_octan_remote
#      scene_id: 21
#  action:
#    - service: script.turn_on
#      data:
#        entity_id: script.parte_meteorologico

- alias: '[None] Nodon Octan button 2 double click'
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 23
  action:
    - service: script.turn_on
      data:
        entity_id: script.parte_meteorologico

- alias: '[None] Nodon Octan button 3 pressed'
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 30
  action:
    - service: switch.turn_off
      data:
        entity_id: group.luces_interiores

- alias: '[None] Nodon Octan button 4 pressed'
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 40
  action:
    - service: script.turn_on
      data:
        entity_id: script.goto_sleep

- alias: '[None] Nodon Octan button 4 long press'
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 41
  action:
    - service: script.turn_on
      data:
        entity_id: script.presence_jordi_at_home

- alias: '[None] Nodon Octan button 4 double click'
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 43
  action:
    - service: script.turn_on
      data:
        entity_id: script.presence_set_virtual_device_home

#############################################################
# Ifttt automations
#############################################################
- alias: '[None] Call service from ifttt'
  trigger:
    platform: event
    event_type: ifttt_webhook_received
    event_data:
      action: call_service
  action:
    service_template: '{{ trigger.event.data.service }}'
    data_template:
      entity_id: '{{ trigger.event.data.entity_id }}'

#############################################################
# Telegram automations
#############################################################
# Telegram bot that executes a service from a callback with the format <service>#<entity_id>. i.e.: script.turn_on#script.fence_close
# It also removes the buttons from original message.
- alias: '[None] Telegram bot that executes a service'
  hide_entity: true
  trigger:
    - platform: event
      event_type: telegram_callback
  condition:
    # Run only in case it has a # in the event data
    condition: template
    value_template: '{{ trigger.event.data.data.find("#") != -1 }}'
  action:
    # Answer callback
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: '{{ trigger.event.data.id }}'
        message: 'Respuesta recibida!'
        show_alert: false
    # Remove inline keyboard from original message.
    - service: telegram_bot.edit_replymarkup
      data_template:
             message_id: '{{ trigger.event.data.message.message_id }}'
             chat_id: '{{ trigger.event.data.chat_id }}'
             inline_keyboard: []
    # Execute service with the format <service>#<entity_id>.
    # If the service or the entity id don't exist, the execution will silently fail
    - service_template: >
        {%- if trigger.event.data.data.find("#") != -1 -%}
          {{trigger.event.data.data[1:trigger.event.data.data.find("#")]}}
        {%- endif -%}

      data_template:
        entity_id: '{{trigger.event.data.data[trigger.event.data.data.find("#")+1:]}}'
#############################################################
# Swarm automations
#############################################################

## Check in at school
#- alias: '[None] Checkin at Colegio'
#  trigger:
#    platform: zone
#    entity_id: device_tracker.jordi_combined
#    zone: zone.colegio
#    event: enter
#  action:
#    service: foursquare.checkin
#    data:
#      venueId: !secret foursquare_colegio_venue_id
## Check in at oficina
#- alias: '[None] Checkin at Oficina'
#  trigger:
#    platform: zone
#    entity_id: device_tracker.jordi_combined
#    zone: zone.colegio
#    event: enter
#  action:
#    service: foursquare.checkin
#    data:
#      venueId: !secret foursquare_office_venue_id

#- alias: '[None] Slack webhook'
#  trigger:
#    - platform: webhook
#      webhook_id: slack-webhook
#  action:
# cómo obtener los datos enviados desde slack: {{ trigger.query | string }}
# intentar usar: {{ trigger.query | tojson | safe}}
# {% set m_test_json = states.sensor.front_door_last_state.state.split(',') %}
#Result with the Sensor state 
#   Message: {{ m_test_json[0] }}
#   Severity: {{ m_test_json[1] }}
  
    # Execute service with the format <service>#<entity_id>.
    # If the service or the entity id don't exist, the execution will silently fail
#    - service_template: >
#        {%- if trigger.query.payload.actions[0].value.find("#") != -1 -%}
#          {{trigger.query.payload.actions[0].value[1:trigger.query.payload.actions[0].value.find("#")]}}
#        {%- endif -%}
#
#      data_template:
#        entity_id: '{{trigger.query.payload.actions[0].value[trigger.query.payload.actions[0].value.find("#")+1:]}}'