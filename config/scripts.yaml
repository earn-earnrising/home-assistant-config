#############################################################
# System scripts
#############################################################
system_restart_ha:
  alias: 'Reiniciar HA'
  sequence:
      - service: homeassistant.restart

system_reboot_pi:
  alias: 'Reiniciar Pi'
  sequence:
      - service: shell_command.reboot_pi

#############################################################
# Speech scripts
#############################################################
speech_set_tts_volume_level:
  alias: 'Lower the home-assistant tts volume level between 23 and 9'
  sequence:
    - condition: time
      after: '23:00'
      before: '9:00'
    - service: media_player.volume_set
      entity_id: media_player.homeassistant
      data:
        volume_level: 0.3
    - delay:
        minutes: 2
    - service: media_player.volume_set
      entity_id: media_player.homeassistant
      data:
        volume_level: 0.75

speech_parte_meteorologico:
  alias: 'Parte meteorológico'
  sequence:
    - service: script.turn_on
      data:
        entity_id: script.speech_set_tts_volume_level
    - service: tts.google_say
      entity_id: media_player.homeassistant
      data_template:
        message: >
          La temperatura exterior es de {{ states("sensor.exterior_termometro_temperatura") | replace("."," con ") }} {{states.sensor["exterior_termometro_temperatura"].attributes.unit_of_measurement }} 
          y una humedad del {{ states("sensor.exterior_termometro_humedad") }} {{states.sensor["exterior_termometro_humedad"].attributes.unit_of_measurement }}.
          La temperatura máxima de hoy ha sido de {{ states("sensor.exterior_termometro_max_temp") | replace("."," con ") }} {{states.sensor["exterior_termometro_max_temp"].attributes.unit_of_measurement }}.
          La temperatura mínima de hoy ha sido de {{ states("sensor.exterior_termometro_min_temp") | replace("."," con ") }} {{states.sensor["exterior_termometro_min_temp"].attributes.unit_of_measurement }}.
          La presión atmosférica es de {{ states("sensor.salon_termometro_presion") | replace("."," con ") }} {{states.sensor["salon_termometro_presion"].attributes.unit_of_measurement }}.
          Las rachas de viento son de {{ states("sensor.exterior_anemometro_velocidad_viento") }} {{states.sensor["exterior_anemometro_velocidad_viento"].attributes.unit_of_measurement }}'
          {%- if states("sensor.exterior_pluviometro_lluvia") == "0" %} No está lloviendo.{% else %} Está lloviendo unos {{ states("sensor.exterior_pluviometro_lluvia") | replace("."," con ") }} {{states.sensor["exterior_pluviometro_lluvia"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor.exterior_pluviometro_lluvia_1") == "0" %} No ha llovido durante la última hora.{% else %} La precipitación de la última hora ha sido de {{ states("sensor.exterior_pluviometro_lluvia_1") | replace("."," con ") }} {{states.sensor["exterior_pluviometro_lluvia_1"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor.exterior_pluviometro_lluvia_24") == "0" %} No ha llovido durante las últimas 24 horas.{% else %} La precipitación de las últimas 24 horas ha sido de {{ states("sensor.exterior_pluviometro_lluvia_24") | replace("."," con ") }} {{states.sensor["exterior_pluviometro_lluvia_24"].attributes.unit_of_measurement }}.{% endif %}
        cache: false

speech_parte_meteorologico_corto:
  alias: 'Parte meteorológico corto'
  sequence:
    - service: script.turn_on
      data:
        entity_id: script.speech_set_tts_volume_level
    - service: tts.google_say
      entity_id: media_player.homeassistant
      data_template:
        message: >
          La temperatura exterior es de {{ states("sensor.exterior_termometro_temperatura") | replace("."," con ") }} {{states.sensor["exterior_termometro_temperatura"].attributes.unit_of_measurement }}.
          La temperatura máxima de hoy ha sido de {{ states("sensor.exterior_termometro_max_temp") | replace("."," con ") }} {{states.sensor["exterior_termometro_max_temp"].attributes.unit_of_measurement }}.
          La temperatura mínima de hoy ha sido de {{ states("sensor.exterior_termometro_min_temp") | replace("."," con ") }} {{states.sensor["exterior_termometro_min_temp"].attributes.unit_of_measurement }}.
        cache: false

chores:
  alias: 'Basura'
  sequence:
    - service: script.turn_on
      data:
        entity_id: script.speech_set_tts_volume_level
    - service: tts.google_say
      entity_id: media_player.homeassistant
      data_template:
        message: >
          {% if now().strftime('%a') != "Sat" %}
            {{['La suerte está echada.',
               'Déjame pensar.',
               'Creo que',
               'He decidido que',
               'Yo diría que',
               'Si la memoria no me falla.',
               'Si no voy mal,',
               'Espera que lo consulto.',
               'Según mis cálculos',
               'Lula me ha dicho que',
               'Si no voy mal',
               'Espera que piense.']|random}} hoy le toca a {% if now().strftime('%j')|int % 2 != 0 %}Carlos{% else %}Jorge{% endif %} sacar {{ {"Sun": "la basura orgánica", "Mon": "los envases y el papel", "Tue": "la basura orgánica", "Wed": "los restos y vídrio", "Thu": "la basura orgánica", "Fri": "los envases", "Sat": "no hay que sacar basura"}[now().strftime('%a')] }}.
          {% else %}
            Hoy estáis de suerte, no hay que sacar la basura
          {% endif %}

#############################################################
# Misc scripts
#############################################################
goto_sleep:
  alias: 'Go to sleep'
  sequence:
    # Only execute script between 21:00 and 6:00
    - condition: time
      after: '21:00'
      before: '6:00'
    # Turn on stairs lights
    - service: switch.turn_on
      data:
        entity_id: switch.escalera_switch
    # Close fence if open
    - service_template: >
        {%- if is_state("sensor.switch_barrera", "Abierta") -%}
          homeassistant.turn_on
        {%- endif -%}

      data:
        entity_id: switch.barrera
    # Turn off outside lights
    - service: light.turn_off
      data:
        entity_id: group.external_lights_group
    # Turn off hall lamp
    - service: switch.turn_off
      data:
        entity_id: switch.swiid_swiidinter_lampara_recibidor_switch
    # Alarm arm night
    - service: script.turn_on
      data:
        entity_id: script.alarm_arm_night
      # Set tts volume level
    - service: script.turn_on
      data:
        entity_id: script.speech_set_tts_volume_level
      # Speech the found incidences and say good night.
    - service: tts.google_say
      entity_id: media_player.homeassistant
      data_template:
        message: >
          {%- if is_state("binary_sensor.porche_sensor_puerta", "on") %}Puerta de la cocina abierta. {% endif %}
          {%- if is_state("binary_sensor.porche_sensor_persiana", "on") %}Persiana de la cocina abierta. {% endif %}
          {%- if is_state("binary_sensor.coladuria_sensor_puerta", "on") %}Puerta de la coladuría abierta. {% endif %}
          {%- if is_state("sensor.switch_barrera", "Abierta") -%}Cerrando barrera.{% endif -%}
          Alarma armada en modo noche. Buenas noches
    # Wait until tts finishes
#    - delay: '00:00:{{ states.media_player.homeassistant.attributes.media_duration | int }}'
    # Wait 2 minutes before turning stair lights off
    - delay:
        minutes: 2
    # Turn stairs lights off
    - service: switch.turn_off
      data:
        entity_id: switch.escalera_switch