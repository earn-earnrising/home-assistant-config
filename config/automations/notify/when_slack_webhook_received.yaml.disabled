#- alias: '[Notify] Slack webhook'
#  trigger:
#    - platform: webhook
#      webhook_id: slack-webhook
#  action:
# c√≥mo obtener los datos enviados desde slack: {{ trigger.query | string }}
# intentar usar: {{ trigger.query | tojson | safe}}
# {% set m_test_json = states.sensor.front_door_last_state.state.split(',') %}
#Result with the Sensor state 
#   Message: {{ m_test_json[0] }}
#   Severity: {{ m_test_json[1] }}
  
    # Execute service with the format <service>#<entity_id>.
    # If the service or the entity id don't exist, the execution will silently fail
#    - service_template: >
#        {%- if trigger.query.payload.actions[0].value.find("#") != -1 -%}
#          {{trigger.query.payload.actions[0].value[1:trigger.query.payload.actions[0].value.find("#")]}}
#        {%- endif -%}
#
#      data_template:
#        entity_id: '{{trigger.query.payload.actions[0].value[trigger.query.payload.actions[0].value.find("#")+1:]}}'