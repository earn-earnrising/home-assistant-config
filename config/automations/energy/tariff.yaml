- alias: '[Energy - Tariff] Set correct energy tariff on start'
  trigger:
    platform: homeassistant
    event: start
  action:
    - service: utility_meter.select_tariff
      data_template:
        entity_id: utility_meter.energy_home_daily 
        tariff: >-
          {%- if as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) >= as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=1).replace(minute=0).replace(second=0)) and as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) < as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=7).replace(minute=0).replace(second=0)) %}
            Super valle
          {%- elif as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) >= as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=13).replace(minute=0).replace(second=0)) and as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) < as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=23).replace(minute=0).replace(second=0))%}
            Pico
          {%- else %}
            Valle
          {%- endif %}
    - service: utility_meter.select_tariff
      data_template:
        entity_id: utility_meter.energy_home_monthly
        tariff: >-
          {%- if as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) >= as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=1).replace(minute=0).replace(second=0)) and as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) < as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=7).replace(minute=0).replace(second=0)) %}
            Super valle
          {%- elif as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) >= as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=13).replace(minute=0).replace(second=0)) and as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) < as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=23).replace(minute=0).replace(second=0))%}
            Pico
          {%- else %}
            Valle
          {%- endif %}

- alias: '[Energy - Tariff] Energy "Pico" tariff'
  trigger:
    platform: time
    at: '13:00:00'
  action:
    - service: utility_meter.select_tariff
      data:
        entity_id: utility_meter.energy_home_daily 
        tariff: 'Pico'
    - service: utility_meter.select_tariff
      data:
        entity_id: utility_meter.energy_home_monthly
        tariff: 'Pico'

- alias: '[Energy - Tariff] Energy "Valle" tariff'
  trigger:
    - platform: time
      at: '23:00:00'
    - platform: time
      at: '07:00:00'
  action:
    - service: utility_meter.select_tariff
      data:
        entity_id: utility_meter.energy_home_daily 
        tariff: 'Valle'
    - service: utility_meter.select_tariff
      data:
        entity_id: utility_meter.energy_home_monthly
        tariff: 'Valle'

- alias: '[Energy - Tariff] Energy "Super valle" tariff'
  trigger:
    platform: time
    at: '01:00:00'
  action:
    - service: utility_meter.select_tariff
      data:
        entity_id: utility_meter.energy_home_daily 
        tariff: 'Super valle'
    - service: utility_meter.select_tariff
      data:
        entity_id: utility_meter.energy_home_monthly
        tariff: 'Super valle'
