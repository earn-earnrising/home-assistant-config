- platform: api_streams

- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'

- platform: rest
  resource: https://api.gdax.com/products/ETH-EUR/ticker
  name: exchange_rate_1_eth
  unit_of_measurement: 'EUR'
  value_template: "{{value_json.price | float | round(2)}}"
  headers:
    User-Agent: Home Assistant

- platform: rest
  resource: https://api.gdax.com/products/BTC-EUR/ticker
  name: exchange_rate_1_btc
  unit_of_measurement: 'EUR'
  value_template: "{{value_json.price | float | round(2)}}"
  headers:
    User-Agent: Home Assistant

- platform: template
  sensors:
    bitcoin_balance:
      friendly_name: 'Saldo Bitcoin'
      icon_template: mdi:currency-btc
      value_template: !secret bitcoin_balance
      unit_of_measurement: 'BTC'
    bitcoin_walet_value: 
      friendly_name: 'Valor cartera Bitcoin'
      icon_template: mdi:currency-eur
      value_template: '{%if states.sensor.exchange_rate_1_btc is not none %}{{(float(states.sensor.exchange_rate_1_btc.state) * float(states.sensor.bitcoin_balance.state)) | round(2)}}{% else %}Calculando...{% endif %}'
      unit_of_measurement: '€'
    ethereum_balance:
      friendly_name: 'Saldo Ethereum'
      icon_template: mdi:currency-eth
      value_template: !secret ethereum_balance
      unit_of_measurement: 'ETH'
    ethereum_walet_value: 
      friendly_name: 'Valor cartera Ethereum'
      icon_template: mdi:currency-eur
      value_template: '{% if states.sensor.exchange_rate_1_eth is not none %}{{(float(states.sensor.exchange_rate_1_eth.state) * float(states.sensor.ethereum_balance.state)) | round(2)}}{% else %}Calculando...{% endif %}'
      unit_of_measurement: '€'

- platform: efergy
  app_token: !secret efergy_app_token
  utc_offset: 2
  monitored_variables:
    - type: current_values

- platform: netatmo
  modules:
    Salón:
      - temperature
      - min_temp
      - max_temp
      - humidity
      - noise
      - pressure
      - co2
      - wifi_status
    Suite:
      - temperature
      - min_temp
      - max_temp
      - humidity
      - co2
      - battery_vp
      - rf_status
    Habitación:
      - temperature
      - min_temp
      - max_temp
      - humidity
      - co2
      - battery_vp
      - rf_status
    Exterior:
      - temperature
      - min_temp
      - max_temp
      - humidity
      - battery_vp
      - rf_status
    Pluviómetro:
      - rain
      - sum_rain_1
      - sum_rain_24
      - battery_vp
      - rf_status
    Anemómetro:
      - windangle
      - windstrength
      - gustangle
      - guststrength
      - battery_vp
      - rf_status

- platform: speedtest
  minute: 30
  hour:
    - 0
    - 6
    - 12
    - 18
  monitored_conditions:
    - ping
    - download
    - upload

- platform: template
  sensors:
    ups_status:
      value_template: >-
        {%- if is_state('sensor.nut_ups_status_data', 'OL') %}
          Normal
        {% elif is_state('sensor.nut_ups_status_data', 'OL CHRG') %}
          Cargando
        {% elif is_state('sensor.nut_ups_status_data', 'OB DISCHRG') %}
          Batería
        {% elif is_state('sensor.nut_ups_status_data', 'LB DISCHRG') %}
          Batería baja
        {% elif is_state('sensor.nut_ups_status_data', 'RB') %}
          Reemplazar batería
        {% else %}
          Desconocido
        {%- endif %}

- platform: template
  sensors:
    # Know if the Wemo Maker sensor has been triggered (off: garage door opened, on: garage door closed)
    switch_barrera:
      friendly_name: 'Estado'
      value_template: >-
          {%- if is_state_attr("switch.barrera", "sensor_state", "off") %}
              Abierta
          {% else %}
              Cerrada
          {%- endif %}
#    ph_piscina:
#      value_template: '{{states. image_processing.sevensegment_ocr_ph_piscina.state | int / 100}}'
#      friendly_name: 'pH'
#      icon_template: mdi:beaker

- platform: template
  sensors:
    # Fibaro FGK10x door sensor battery level - kitchen door
    cocina_sensor_puerta_bateria:
      value_template: '{% if states.zwave.porche_sensor_puerta %}{{ states.zwave.porche_sensor_puerta.attributes.battery_level }}{% else %}Desconocido{% endif %}'
      unit_of_measurement: '%'

    # Fibaro FGK10x door sensor battery level - kitchen blind
    cocina_sensor_persiana_bateria:
      value_template: '{% if states.zwave.porche_sensor_persiana %}{{ states.zwave.porche_sensor_persiana.attributes.battery_level }}{% else %}Desconocido{% endif %}'
      unit_of_measurement: '%'

    # Fibaro FGK10x door sensor battery level - kitchen door
    coladuria_sensor_puerta_bateria:
      value_template: '{% if states.zwave.coladuria_sensor_puerta %}{{ states.zwave.coladuria_sensor_puerta.attributes.battery_level }}{% else %}Desconocido{% endif %}'
      unit_of_measurement: '%'

    # Fibaro FGK10x door sensor battery level - swimming pool
    piscina_sensor_piscina_bateria:
      value_template: '{% if states.zwave.fibaro_fgk10x_door_opening_sensor_piscina %}{{ states.zwave.fibaro_fgk10x_door_opening_sensor_piscina.attributes.battery_level }}{% else %}Desconocido{% endif %}'
      unit_of_measurement: '%'

    # Fibaro FGMS-001 Motion sensor
    salon_sensor_movimiento_bateria:
      value_template: '{% if states.zwave.salon_sensor_movimiento %}{{ states.zwave.salon_sensor_movimiento.attributes.battery_level }}{% else %}Desconocido{% endif %}'
      unit_of_measurement: '%'

    # Nodon Octan button battery level
    recibidor_boton_bateria:
      value_template: '{% if states.zwave.nodon_crc3100_octan_remote %}{{ states.zwave.nodon_crc3100_octan_remote.attributes.battery_level }}{% else %}Desconocido{% endif %}'
      unit_of_measurement: '%'

# Sensor to define the season of the year
- platform: season

# Sensor to get sunset and sunrise hours with a custom format.
- platform: template
  sensors:
    sunrise:
      friendly_name: 'Amanecer'
      value_template: '{{ as_timestamp(states.sun.sun.attributes.next_rising)|timestamp_custom("%H:%M:%S") }}'
    sunset:
      friendly_name: 'Puesta de sol'
      value_template: '{{ as_timestamp(states.sun.sun.attributes.next_setting)|timestamp_custom("%H:%M:%S") }}'

- platform: systemmonitor
  resources:
    - type: disk_free
      arg: /
    - type: memory_free
    - type: processor_use
    - type: last_boot
    - type: since_last_boot

- platform: template
  sensors:
    hp_photosmart_5520:
      friendly_name: 'HP Photosmart 5520'
      value_template: >-
          {%- if is_state("device_tracker.hp_photosmart_5520", "home") %}
              Encendida
          {% else %}
              Apagada
          {%- endif %}

#- platform: cups
#  printers:
#    - HP_Photosmart_5520

# Magenta ink level
- platform: mqtt
  state_topic: 'home/printer/magenta'
  name: ink_level_magenta
  unit_of_measurement: '%'

# Cyan ink level
- platform: mqtt
  state_topic: 'home/printer/cyan'
  name: ink_level_cyan
  unit_of_measurement: '%'

# Yellow ink level
- platform: mqtt
  state_topic: 'home/printer/yellow'
  name: ink_level_yellow
  unit_of_measurement: '%'

# black ink level
- platform: mqtt
  state_topic: 'home/printer/black'
  name: ink_level_black
  unit_of_measurement: '%'

- platform: nut
  resources:
    - ups.status
    - battery.charge
    - battery.runtime
    - ups.beeper.status
    - ups.mfr
    - ups.model

# Swimming pool related sensors
- platform: template
  sensors:
    piscina_width:
      friendly_name: 'Ancho'
      value_template: 3.5
      unit_of_measurement: m
    piscina_height:
      friendly_name: 'Largo'
      value_template: 7
      unit_of_measurement: m
    piscina_average_depth:
      friendly_name: 'Profundidad media'
      value_template: 1.6
      unit_of_measurement: m
    piscina_pump_power:
      friendly_name: 'Potencia'
      value_template: 16
      unit_of_measurement: 'm3/h'
    piscina_pump_efficiency:
      friendly_name: 'Eficiencia'
      value_template: 0.8
    piscina_capacity:
      friendly_name: 'Capacidad'
      value_template: >-
        {%- if states.sensor.piscina_width and states.sensor.piscina_height and states.sensor.piscina_average_depth %}
        {{ states.sensor.piscina_width.state | float * states.sensor.piscina_height.state | float * states.sensor.piscina_average_depth.state | float}}
        {%- endif %}
      unit_of_measurement: 'm3'
    piscina_recirculation:
      friendly_name: 'Recirculación'
      value_template: >-
        {%- if states.sensor.piscina_capacity and states.sensor.piscina_pump_power and states.sensor.piscina_pump_efficiency %}
        {{ (states.sensor.piscina_capacity.state | float / (states.sensor.piscina_pump_power.state | float * states.sensor.piscina_pump_efficiency.state | float )) | round(1) }}
        {%- endif %}
      unit_of_measurement: 'h'
    piscina_k_factor:
      friendly_name: 'Factor reduccion (K)'
      value_template: >-
        {%- if states.sensor.piscina_temperature_mean.state | float > 15 %}
          1
        {% elif states.sensor.piscina_temperature_mean.state | float <= 15 and states.sensor.piscina_temperature_mean.state | float > 13 %}
          0.5
        {% elif states.sensor.piscina_temperature_mean.state | float <= 13 and states.sensor.piscina_temperature_mean.state | float > 10 %}
          0.33
        {% elif states.sensor.piscina_temperature_mean.state | float <= 10 and states.sensor.piscina_temperature_mean.state | float > 5 %}
          0.25
        {% elif states.sensor.piscina_temperature_mean.state | float <= 5 %}
          0.15
        {%- endif %}

      icon_template: 'mdi:oil-temperature'
    piscina_filtering_time:
      friendly_name: 'Tiempo de filtrado'
      value_template: >- 
        {% set filtering_time = (states.sensor.piscina_k_factor.state | float * ((states.sensor.piscina_temperature_mean.state | float / 10) * states.sensor.piscina_recirculation.state | float )) | float | round(2)%}
        {%- if filtering_time < 2 %}
          {{ 2 | float }}
        {% elif filtering_time > 12 %}
          {{ 12 | float }}
        {% else %}
          {{ filtering_time }}
        {%- endif %}
        
      unit_of_measurement: 'h'
      icon_template: 'mdi:clock'
    piscina_off_time:
      friendly_name: 'Apagado'
      value_template: >- 
        {%- set timezone = as_timestamp(strptime(states.sensor.date__time.state, "%Y-%m-%d, %H:%M"))|timestamp_custom("%Z")-%}
        {%- if timezone == 'CEST' %}
          {{ as_timestamp(strptime(states.sensor.date__time.state, "%Y-%m-%d, %H:%M").replace(hour=13).replace(minute=0).replace(second=0))|timestamp_custom("%Y-%m-%d, %H:%M") }}
        {% else %}
          {{ as_timestamp(strptime(states.sensor.date__time.state, "%Y-%m-%d, %H:%M").replace(hour=12).replace(minute=0).replace(second=0))|timestamp_custom("%Y-%m-%d, %H:%M") }}
        {%- endif %}
      icon_template: 'mdi:power-plug-off'
    piscina_on_time:
      friendly_name: 'Encendido'
      # The time round to the minute
      value_template: >-
        {%- if states.sensor.piscina_off_time %}
          {{(((as_timestamp(strptime(states.sensor.piscina_off_time.state, "%Y-%m-%d, %H:%M"))-(states.sensor.piscina_filtering_time.state | float * 60 * 60)) // 60) * 60)|timestamp_custom("%Y-%m-%d, %H:%M")}}
        {%- endif %}
      icon_template: 'mdi:power-plug'
- platform: statistics
  name: piscina_temperature
  #entity_id: sensor.fibaro_fgk10x_door_opening_sensor_piscina_temperature
  entity_id: input_number.piscina_temperature
  max_age:
    hours: 24

# Use of the swimming pool pump today
- platform: history_stats
  name: piscina_on_history
  entity_id: switch.motor_piscina
  state: 'on'
  start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'

- platform: cert_expiry
  host: !secret cert_expiry_host
  name: Caducidad certificado SSL

- platform: wunderground
  api_key: !secret weather_underground_api_key
  lang: SP
  monitored_conditions:
    - alerts
    - weather
    - weather_1d_metric

# Comfort sensors
- platform: min_max
  name: temperature_ground_floor
  type: mean
  round_digits: 1
  entity_ids:
    - sensor.recibidor_termometro_temperatura
    - sensor.netatmo_salon_temperature
    - sensor.salon_sensor_movimiento_temperature
    - sensor.porche_sensor_puerta_temperature

- platform: min_max
  name: temperature_first_floor
  type: mean
  round_digits: 1
  entity_ids:
    - sensor.netatmo_suite_temperature
    - sensor.netatmo_habitacion_temperature

- platform: template
  sensors:
    planta_baja_temperatura_tendencia:
      friendly_name: 'Tend temp planta baja'
      value_template: >-
        {%- if is_state("binary_sensor.planta_baja_temperatura_descendiendo", "on") -%}
        En descenso
        {%- elif is_state("binary_sensor.planta_baja_temperatura_aumentando", "on") -%}
        En aumento
        {%- else -%}
        Sin cambio
        {%- endif %}
      icon_template: >-
        {%- if is_state("binary_sensor.planta_baja_temperatura_descendiendo", "on") -%}
        mdi:arrow-down-thick
        {%- elif is_state("binary_sensor.planta_baja_temperatura_aumentando", "on") -%}
        mdi:arrow-up-thick
        {%- else -%}
        mdi:window-minimize
        {%- endif %}

    primera_planta_temperatura_tendencia:
      friendly_name: 'Tend temp 1ª planta'
      value_template: >-
        {%- if is_state("binary_sensor.primera_planta_temperatura_descendiendo", "on") -%}
        En descenso
        {%- elif is_state("binary_sensor.primera_planta_temperatura_aumentando", "on") -%}
        En aumento
        {%- else -%}
        Sin cambio
        {%- endif %}
      icon_template: >-
        {%- if is_state("binary_sensor.primera_planta_temperatura_descendiendo", "on") -%}
        mdi:arrow-down-thick
        {%- elif is_state("binary_sensor.primera_planta_temperatura_aumentando", "on") -%}
        mdi:arrow-up-thick
        {%- else -%}
        mdi:window-minimize
        {%- endif %}

    exterior_termometro_temperatura_tendencia:
      friendly_name: 'Tendencia temp'
      value_template: >-
        {%- if is_state("binary_sensor.exterior_termometro_temperatura_descendiendo", "on") -%}
        En descenso
        {%- elif is_state("binary_sensor.exterior_termometro_temperatura_aumentando", "on") -%}
        En aumento
        {%- else -%}
        Sin cambio
        {%- endif %}
      icon_template: >-
        {%- if is_state("binary_sensor.exterior_termometro_temperatura_descendiendo", "on") -%}
        mdi:arrow-down-thick
        {%- elif is_state("binary_sensor.exterior_termometro_temperatura_aumentando", "on") -%}
        mdi:arrow-up-thick
        {%- else -%}
        mdi:window-minimize
        {%- endif %}

    salon_termometro_temperatura_tendencia:
      friendly_name: 'Tendencia temp'
      value_template: >-
        {%- if is_state("binary_sensor.salon_termometro_temperatura_descendiendo", "on") -%}
        En descenso
        {%- elif is_state("binary_sensor.salon_termometro_temperatura_aumentando", "on") -%}
        En aumento
        {%- else -%}
        Sin cambio
        {%- endif %}
      icon_template: >-
        {%- if is_state("binary_sensor.salon_termometro_temperatura_descendiendo", "on") -%}
        mdi:arrow-down-thick
        {%- elif is_state("binary_sensor.salon_termometro_temperatura_aumentando", "on") -%}
        mdi:arrow-up-thick
        {%- else -%}
        mdi:window-minimize
        {%- endif %}

    salon_termometro_co2_tendencia:
      friendly_name: 'Tendencia co2'
      value_template: >-
        {%- if is_state("binary_sensor.salon_termometro_co2_descendiendo", "on") -%}
        En descenso
        {%- elif is_state("binary_sensor.salon_termometro_co2_aumentando", "on") -%}
        En aumento
        {%- else -%}
        Sin cambio
        {%- endif %}
      icon_template: >-
        {%- if is_state("binary_sensor.salon_termometro_co2_descendiendo", "on") -%}
        mdi:arrow-down-thick
        {%- elif is_state("binary_sensor.salon_termometro_co2_aumentando", "on") -%}
        mdi:arrow-up-thick
        {%- else -%}
        mdi:window-minimize
        {%- endif %}

    recibidor_termometro_temperatura_tendencia:
      friendly_name: 'Tendencia temp'
      value_template: >-
        {%- if is_state("binary_sensor.recibidor_termometro_temperatura_descendiendo", "on") -%}
        En descenso
        {%- elif is_state("binary_sensor.recibidor_termometro_temperatura_aumentando", "on") -%}
        En aumento
        {%- else -%}
        Sin cambio
        {%- endif %}
      icon_template: >-
        {%- if is_state("binary_sensor.recibidor_termometro_temperatura_descendiendo", "on") -%}
        mdi:arrow-down-thick
        {%- elif is_state("binary_sensor.recibidor_termometro_temperatura_aumentando", "on") -%}
        mdi:arrow-up-thick
        {%- else -%}
        mdi:window-minimize
        {%- endif %}

    suite_termometro_temperatura_tendencia:
      friendly_name: 'Tendencia temp'
      value_template: >-
        {%- if is_state("binary_sensor.suite_termometro_temperatura_descendiendo", "on") -%}
        En descenso
        {%- elif is_state("binary_sensor.suite_termometro_temperatura_aumentando", "on") -%}
        En aumento
        {%- else -%}
        Sin cambio
        {%- endif %}
      icon_template: >-
        {%- if is_state("binary_sensor.suite_termometro_temperatura_descendiendo", "on") -%}
        mdi:arrow-down-thick
        {%- elif is_state("binary_sensor.suite_termometro_temperatura_aumentando", "on") -%}
        mdi:arrow-up-thick
        {%- else -%}
        mdi:window-minimize
        {%- endif %}

    suite_termometro_co2_tendencia:
      friendly_name: 'Tendencia CO2'
      value_template: >-
        {%- if is_state("binary_sensor.suite_termometro_co2_descendiendo", "on") -%}
        En descenso
        {%- elif is_state("binary_sensor.suite_termometro_co2_aumentando", "on") -%}
        En aumento
        {%- else -%}
        Sin cambio
        {%- endif %}
      icon_template: >-
        {%- if is_state("binary_sensor.suite_termometro_co2_descendiendo", "on") -%}
        mdi:arrow-down-thick
        {%- elif is_state("binary_sensor.suite_termometro_co2_aumentando", "on") -%}
        mdi:arrow-up-thick
        {%- else -%}
        mdi:window-minimize
        {%- endif %}

    habitacion_termometro_temperatura_tendencia:
      friendly_name: 'Tendencia temp'
      value_template: >-
        {%- if is_state("binary_sensor.habitacion_termometro_temperatura_descendiendo", "on") -%}
        En descenso
        {%- elif is_state("binary_sensor.habitacion_termometro_temperatura_aumentando", "on") -%}
        En aumento
        {%- else -%}
        Sin cambio
        {%- endif %}
      icon_template: >-
        {%- if is_state("binary_sensor.habitacion_termometro_temperatura_descendiendo", "on") -%}
        mdi:arrow-down-thick
        {%- elif is_state("binary_sensor.habitacion_termometro_temperatura_aumentando", "on") -%}
        mdi:arrow-up-thick
        {%- else -%}
        mdi:window-minimize
        {%- endif %}

    habitacion_termometro_co2_tendencia:
      friendly_name: 'Tendencia CO2'
      value_template: >-
        {%- if is_state("binary_sensor.habitacion_termometro_co2_descendiendo", "on") -%}
        En descenso
        {%- elif is_state("binary_sensor.habitacion_termometro_co2_aumentando", "on") -%}
        En aumento
        {%- else -%}
        Sin cambio
        {%- endif %}
      icon_template: >-
        {%- if is_state("binary_sensor.habitacion_termometro_co2_descendiendo", "on") -%}
        mdi:arrow-down-thick
        {%- elif is_state("binary_sensor.habitacion_termometro_co2_aumentando", "on") -%}
        mdi:arrow-up-thick
        {%- else -%}
        mdi:window-minimize
        {%- endif %}

- platform: whois
  domain: !secret domain_name1
  name: Dominio principal
  
- platform: whois
  domain: !secret domain_name2
  name: Dominio nena

- platform: uptime
  name: "HA runtime in minutes"
  unit_of_measurement: minutes