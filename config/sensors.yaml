- platform: websocket_api

- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'

- platform: google_wifi

- platform: rest
  resource: https://api.gdax.com/products/ETH-EUR/ticker
  name: exchange_rate_1_eth
  unit_of_measurement: 'EUR'
  value_template: "{{value_json.price | float | round(2)}}"
  headers:
    User-Agent: Home Assistant

- platform: rest
  resource: https://api.gdax.com/products/BTC-EUR/ticker
  name: exchange_rate_1_btc
  unit_of_measurement: 'EUR'
  value_template: "{{value_json.price | float | round(2)}}"
  headers:
    User-Agent: Home Assistant

- platform: template
  sensors:
    bitcoin_balance:
      friendly_name: 'Saldo Bitcoin'
      icon_template: mdi:bitcoin
      value_template: !secret bitcoin_balance
      unit_of_measurement: 'BTC'
      entity_id: sensor.date_time
    bitcoin_walet_value: 
      friendly_name: 'Valor cartera Bitcoin'
      icon_template: mdi:currency-eur
      value_template: '{%if states.sensor.ha_runtime_in_minutes.state|float > 2 %}{%if states.sensor.exchange_rate_1_btc is not none %}{{(float(states.sensor.exchange_rate_1_btc.state) * float(states.sensor.bitcoin_balance.state)) | round(2)}}{% endif %}{% else %}Calculando...{% endif %}'
      unit_of_measurement: '€'
      entity_id: sensor.exchange_rate_1_btc
    ethereum_balance:
      friendly_name: 'Saldo Ethereum'
      icon_template: mdi:ethereum
      value_template: !secret ethereum_balance
      unit_of_measurement: 'ETH'
      entity_id: sensor.date_time
    ethereum_walet_value: 
      friendly_name: 'Valor cartera Ethereum'
      icon_template: mdi:currency-eur
      value_template: '{%if states.sensor.ha_runtime_in_minutes.state|float > 2 %}{% if states.sensor.exchange_rate_1_eth is not none %}{{(float(states.sensor.exchange_rate_1_eth.state) * float(states.sensor.ethereum_balance.state)) | round(2)}}{% endif %}{% else %}Calculando...{% endif %}'
      unit_of_measurement: '€'
      entity_id: sensor.exchange_rate_1_eth

#- platform: template
#  sensors:
#    hokuslaptop_powerused:
#      value_template: '{{states.switch.hokuslaptop.attributes.current_power_w | int}}'
#    ph_piscina:
#      value_template: '{{states. image_processing.sevensegment_ocr_ph_piscina.state | int / 100}}'
#      friendly_name: 'pH'
#      icon_template: mdi:beaker

#- platform: template
#  sensors:
#    # Nodon Octan button battery level
#    recibidor_boton_bateria:
#      value_template: '{% if states.zwave.nodon_crc3100_octan_remote %}{{ states.zwave.nodon_crc3100_octan_remote.attributes.battery_level }}{% else %}Desconocido{% endif %}'
#      unit_of_measurement: '%'

- platform: systemmonitor
  resources:
    - type: disk_free
      arg: /
    - type: disk_use
      arg: /share/camera
    - type: memory_free
    - type: processor_use
    - type: last_boot

- platform: template
  sensors:
    hp_photosmart_5520:
      friendly_name: 'HP Photosmart 5520'
      value_template: >-
          {%- if is_state("device_tracker.hp_photosmart_5520", "home") %}
              Encendida
          {% else %}
              Apagada
          {%- endif %}

#- platform: cups
#  printers:
#    - HP_Photosmart_5520

# Magenta ink level
- platform: mqtt
  state_topic: 'home/sensor/printer/magenta'
  name: ink_level_magenta
  unit_of_measurement: '%'

# Cyan ink level
- platform: mqtt
  state_topic: 'home/sensor/printer/cyan'
  name: ink_level_cyan
  unit_of_measurement: '%'

# Yellow ink level
- platform: mqtt
  state_topic: 'home/sensor/printer/yellow'
  name: ink_level_yellow
  unit_of_measurement: '%'

# black ink level
- platform: mqtt
  state_topic: 'home/sensor/printer/black'
  name: ink_level_black
  unit_of_measurement: '%'

- platform: cert_expiry
  host: !secret cert_expiry_host
  name: Caducidad certificado SSL

- platform: whois
  domain: !secret domain_name1
  name: Dominio principal
  
- platform: whois
  domain: !secret domain_name2
  name: Dominio nena

- platform: uptime
  name: "HA runtime in minutes"
  unit_of_measurement: minutes

- platform: sql
  db_url: !secret recorder_db_url
  queries:
    - name: DB size
      query: 'SELECT table_schema "database", Round((Sum(data_length + index_length) / 1024) / 1024, 0) "value" FROM information_schema.tables WHERE table_schema="homeassistant" GROUP BY table_schema;'
      column: 'value'
      unit_of_measurement: MiB