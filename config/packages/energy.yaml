homeassistant:
  customize:
    sensor.efergy_2577:
      friendly_name: 'Consumo instantáneo'
      icon: 'mdi:speedometer'
    sensor.energy_ups_status:
      friendly_name: 'SAI'
      icon: 'mdi:power-socket-eu'
    sensor.nut_ups_manufacturer:
      friendly_name: 'Marca'
    sensor.nut_ups_model:
      friendly_name: 'Modelo'
    sensor.nut_ups_battery_charge:
      friendly_name: 'Carga'
    sensor.nut_ups_battery_runtime:
      friendly_name: 'Tiempo restante'
    sensor.energy_home_daily_pico:
      friendly_name: 'Consumo diario (pico)'
    sensor.energy_home_daily_valle:
      friendly_name: 'Consumo diario (valle)'
    sensor.energy_home_daily_super_valle:
      friendly_name: 'Consumo diario (super valle)'
    sensor.energy_home_monthly_pico:
      friendly_name: 'Consumo mensual (pico)'
    sensor.energy_home_monthly_valle:
      friendly_name: 'Consumo mensual (valle)'
    sensor.energy_home_monthly_super_valle:
      friendly_name: 'Consumo mensual (super valle)'
    ###################################
    # Binary Sensors
    ###################################
    binary_sensor.energy_ups_status_bs:
      friendly_name: 'Suministro eléctrico'
    ###################################
    # Switches
    ###################################
    switch.energy_ups_beeper:
      friendly_name: 'Pitido'
      icon: mdi:music-note

    utility_meter.energy_home_daily:
      friendly_name: 'Tarifa'

recorder:
  exclude:
    domains:
      - utility_meter
    entities:
      - sensor.nut_ups_manufacturer
      - sensor.nut_ups_model
      - sensor.nut_ups_status_data
      - sensor.nut_ups_beeper_status
      - sensor.nut_ups_battery_runtime
      - sensor.nut_ups_battery_charge

sensor:
  - platform: efergy
    app_token: !secret efergy_app_token
    utc_offset: 2
    monitored_variables:
      - type: current_values

  - platform: integration 
    source: sensor.efergy_2577
    name: energy_spent
    unit_prefix: k
    round: 2

  - platform: template
    sensors:
      energy_ups_status:
        value_template: >-
          {%- if is_state('sensor.nut_ups_status_data', 'OL') %}
            Normal
          {% elif is_state('sensor.nut_ups_status_data', 'OL CHRG') %}
            Cargando
          {% elif is_state('sensor.nut_ups_status_data', 'OB DISCHRG') %}
            Batería
          {% elif is_state('sensor.nut_ups_status_data', 'LB DISCHRG') %}
            Batería baja
          {% elif is_state('sensor.nut_ups_status_data', 'RB') %}
            Reemplazar batería
          {% else %}
            Desconocido
          {%- endif %}
  
  - platform: nut
    resources:
      - ups.status
      - ups.status.display
      - battery.charge
      - battery.runtime
      - ups.beeper.status
      - ups.mfr
      - ups.model

binary_sensor:
  - platform: template
    sensors:
      energy_ups_status_bs:
        device_class: plug
        entity_id: sensor.nut_ups_status_data
        value_template: "{{ is_state('sensor.nut_ups_status_data', 'OL') or is_state('sensor.nut_ups_status_data', 'OL CHRG') }}"
        delay_off:
          seconds: 30

utility_meter:
  energy_home_daily:
    source: sensor.energy_spent
    cycle: daily 
    tariffs:
      - Pico
      - Valle
      - Super valle
  energy_home_monthly:
    source: sensor.energy_spent
    cycle: monthly
    tariffs:
      - Pico
      - Valle
      - Super valle

automation:
  #############################################################
  # Power automations
  #############################################################
  
  # Notify when a power cut longer than 1 minute detected
  - alias: '[Energy] Notify power cut'
    trigger:
      platform: state
      entity_id: sensor.energy_ups_status
      to: 'Batería'
      for:
        minutes: 1
    action:
      - service: notify.telegram
        data:
          message: 'Corte en el suministro eléctrico detectado'
      - service: notify.slack
        data_template:
          message: ''
          data:
            attachments:
              - color: 'warning'
                pretext: ':zap: *Suministro eléctrico* :zap:'
                text: 'Corte en el suministro eléctrico detectado'
                fallback: 'Suministro eléctrico'

  # Notify when the power is back normal
  - alias: '[Energy] Notify power ok'
    trigger:
      - platform: state
        entity_id: sensor.energy_ups_status
        to: 'Cargando'
      - platform: state
        entity_id: sensor.energy_ups_status
        to: 'Normal'
    condition:
      - condition: numeric_state
        entity_id: sensor.ha_runtime_in_minutes
        above: 2
    action:
      - service: notify.telegram
        data:
          message: 'Suministro eléctrico reestablecido'
      - service: notify.slack
        data_template:
          message: ''
          data:
            attachments:
              - color: 'good'
                pretext: ':zap: *Suministro eléctrico* :zap:'
                text: 'Suministro eléctrico restablecido'
                fallback: 'Suministro eléctrico'

  # Notify when the UPS battery has to be replaced
  - alias: '[Energy] Notify ups battery replacement'
    trigger:
      platform: state
      entity_id: sensor.energy_ups_status
      to: 'Reemplazar batería'
    action:
      - service: notify.telegram
        data:
          message: 'Batería del SAI agotándose, reemplazar'
      - service: notify.slack
        data_template:
          message: ''
          data:
            attachments:
              - color: 'warning'
                pretext: ':zap: *Suministro eléctrico* :zap:'
                text: 'Batería del SAI agotándose, reemplazar'
                fallback: 'Suministro eléctrico'

  - alias: '[Energy] Set correct energy tariff on start'
    trigger:
      platform: homeassistant
      event: start
    action:
      - service: utility_meter.select_tariff
        data_template:
          entity_id: utility_meter.energy_home_daily 
          tariff: >-
            {%- if as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) >= as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=1).replace(minute=0).replace(second=0)) and as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) < as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=7).replace(minute=0).replace(second=0)) %}
              Super valle
            {%- elif as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) >= as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=13).replace(minute=0).replace(second=0)) and as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) < as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=23).replace(minute=0).replace(second=0))%}
              Pico
            {%- else %}
              Valle
            {%- endif %}
      - service: utility_meter.select_tariff
        data_template:
          entity_id: utility_meter.energy_home_monthly
          tariff: >-
            {%- if as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) >= as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=1).replace(minute=0).replace(second=0)) and as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) < as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=7).replace(minute=0).replace(second=0)) %}
              Super valle
            {%- elif as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) >= as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=13).replace(minute=0).replace(second=0)) and as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M")) < as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=23).replace(minute=0).replace(second=0))%}
              Pico
            {%- else %}
              Valle
            {%- endif %}

  - alias: '[Energy] Energy Pico time'
    trigger:
      platform: time
      at: '13:00:00'
    action:
      - service: utility_meter.select_tariff
        data:
          entity_id: utility_meter.energy_home_daily 
          tariff: 'Pico'
      - service: utility_meter.select_tariff
        data:
          entity_id: utility_meter.energy_home_monthly
          tariff: 'Pico'

  - alias: '[Energy] Energy Valle time'
    trigger:
      - platform: time
        at: '23:00:00'
      - platform: time
        at: '07:00:00'
    action:
      - service: utility_meter.select_tariff
        data:
          entity_id: utility_meter.energy_home_daily 
          tariff: 'Valle'
      - service: utility_meter.select_tariff
        data:
          entity_id: utility_meter.energy_home_monthly
          tariff: 'Valle'

  - alias: '[Energy] Energy Super valle time'
    trigger:
      platform: time
      at: '01:00:00'
    action:
      - service: utility_meter.select_tariff
        data:
          entity_id: utility_meter.energy_home_daily 
          tariff: 'Super valle'
      - service: utility_meter.select_tariff
        data:
          entity_id: utility_meter.energy_home_monthly
          tariff: 'Super valle'
