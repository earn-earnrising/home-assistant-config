homeassistant:
  customize:
    sensor.piscina_on_history:
      friendly_name: 'Uso bomba hoy'
    sensor.piscina_water_temperature:
      friendly_name: 'Temperatura agua'
      icon: 'mdi:oil-temperature'
    sensor.piscina_temperature_mean:
      friendly_name: 'Temp. media agua'
    sensor.piscina_filtered_realistic_water_temperature:
      friendly_name: 'Temp. realista agua'
    switch.motor_piscina:
      friendly_name: 'Depuradora'
    switch.luz_piscina:
      friendly_name: 'Luz'
recorder:
  exclude:
    entities:
      - sensor.piscina_pump_efficiency
      - sensor.piscina_off_time
      - sensor.piscina_on_time
      - sensor.piscina_width
      - sensor.piscina_height
      - sensor.piscina_average_depth
      - sensor.piscina_pump_power
      - sensor.piscina_capacity
      - sensor.piscina_recirculation
      - binary_sensor.motor_piscina_btn
      - switch.luz_piscina_2
      - switch.motor_piscina_2

group:
  Piscina:
    entities:
      - switch.motor_piscina
      - switch.luz_piscina
      - sensor.piscina_on_history
      - input_number.temperature_correction
      - sensor.piscina_water_temperature
      - sensor.piscina_temperature_mean
      - sensor.piscina_filtered_realistic_water_temperature
      - sensor.piscina_k_factor
      - sensor.piscina_filtering_time
      - sensor.piscina_on_time
      - sensor.piscina_off_time
      - history_graph.temperatura_piscina
      - camera.piscina

history_graph:
  temperature_swimmingpool:
    name: Temperatura piscina
    entities:
      - sensor.piscina_water_temperature
      - sensor.piscina_temperature_mean
      - sensor.piscina_filtered_realistic_water_temperature
    hours_to_show: 336
    refresh: 600

switch:
  - platform: mqtt
    name: "Motor piscina"
    icon: mdi:pool
    state_topic: "stat/motor_piscina/POWER"
    command_topic: "cmnd/motor_piscina/POWER"
    availability_topic: "tele/motor_piscina/LWT"
    payload_available: "Online"
    payload_not_available: "Offline"
    payload_off: "OFF"
    payload_on: "ON"
    retain: false

  - platform: mqtt
    name: "Luz Piscina"
    icon: 'mdi:lightbulb'
    state_topic: "stat/luz_piscina/POWER"
    command_topic: "cmnd/luz_piscina/POWER"
    availability_topic: "tele/luz_piscina/LWT"
    payload_available: "Online"
    payload_not_available: "Offline"
    payload_off: "OFF"
    payload_on: "ON"
    retain: false

sensor:
  - platform: template
    sensors:
      piscina_width:
        friendly_name: 'Ancho'
        value_template: 3.5
        unit_of_measurement: m
        entity_id: sensor.date_time
      piscina_height:
        friendly_name: 'Largo'
        value_template: 7
        unit_of_measurement: m
        entity_id: sensor.date_time
      piscina_average_depth:
        friendly_name: 'Profundidad media'
        value_template: 1.6
        unit_of_measurement: m
        entity_id: sensor.date_time
      piscina_pump_power:
        friendly_name: 'Potencia'
        value_template: 16
        unit_of_measurement: 'm3/h'
        entity_id: sensor.date_time
      piscina_pump_efficiency:
        friendly_name: 'Eficiencia'
        value_template: 0.8
        entity_id: sensor.date_time
      piscina_capacity:
        friendly_name: 'Capacidad'
        value_template: >-
          {%if states.sensor.ha_runtime_in_minutes.state|float > 2 %}
          {%- if states.sensor.piscina_width and states.sensor.piscina_height and states.sensor.piscina_average_depth %}
          {{ states.sensor.piscina_width.state | float * states.sensor.piscina_height.state | float * states.sensor.piscina_average_depth.state | float}}
          {%- endif %}
          {% else %}Calculando...{%- endif %}
        unit_of_measurement: 'm3'
      piscina_recirculation:
        friendly_name: 'Recirculación'
        value_template: >-
          {%if states.sensor.ha_runtime_in_minutes.state|float > 2 %}
          {%- if states.sensor.piscina_capacity and states.sensor.piscina_pump_power and states.sensor.piscina_pump_efficiency %}
          {{ (states.sensor.piscina_capacity.state | float / (states.sensor.piscina_pump_power.state | float * states.sensor.piscina_pump_efficiency.state | float )) | round(1) }}
          {%- endif %}
          {% else %}Calculando...{%- endif %}
        unit_of_measurement: 'h'
      piscina_k_factor:
        friendly_name: 'Factor reduccion (K)'
        value_template: >-
          {%if states.sensor.ha_runtime_in_minutes.state|float > 2 %}
          {%- if states.sensor.piscina_temperature_mean.state | float > 15 %}
            1
          {% elif states.sensor.piscina_temperature_mean.state | float <= 15 and states.sensor.piscina_temperature_mean.state | float > 13 %}
            0.5
          {% elif states.sensor.piscina_temperature_mean.state | float <= 13 and states.sensor.piscina_temperature_mean.state | float > 10 %}
            0.33
          {% elif states.sensor.piscina_temperature_mean.state | float <= 10 and states.sensor.piscina_temperature_mean.state | float > 5 %}
            0.25
          {% elif states.sensor.piscina_temperature_mean.state | float <= 5 %}
            0.15
          {%- endif %}
          {% else %}Calculando...{%- endif %}
        icon_template: 'mdi:arrow-down-bold'
        entity_id: sensor.date_time, sensor.piscina_temperature_mean
      piscina_filtering_time:
        friendly_name: 'Tiempo de filtrado'
        value_template: >- 
          {%if states.sensor.ha_runtime_in_minutes.state|float > 2 %}
          {% set filtering_time = (states.sensor.piscina_k_factor.state | float * ((states.sensor.piscina_temperature_mean.state | float / 10) * states.sensor.piscina_recirculation.state | float )) | float | round(2)%}
          {%- if filtering_time < 2 %}
            {{ 2 | float }}
          {% elif filtering_time > 12 %}
            {{ 12 | float }}
          {% else %}
            {{ filtering_time }}
          {%- endif %}
          {% else %}Calculando...{%- endif %}
        unit_of_measurement: 'h'
        entity_id: sensor.date_time, sensor.piscina_k_factor, sensor.piscina_temperature_mean
        icon_template: 'mdi:clock'
      piscina_off_time:
        friendly_name: 'Apagado'
        value_template: >- 
          {%- set timezone = as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M"))|timestamp_custom("%Z")-%}
          {%- if timezone == 'CEST' %}
            {{ as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=13).replace(minute=0).replace(second=0))|timestamp_custom("%Y-%m-%d, %H:%M") }}
          {% else %}
            {{ as_timestamp(strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M").replace(hour=12).replace(minute=0).replace(second=0))|timestamp_custom("%Y-%m-%d, %H:%M") }}
          {%- endif %}
        icon_template: 'mdi:power-plug-off'
        entity_id: sensor.date_time
      piscina_on_time:
        friendly_name: 'Encendido'
        # The time round to the minute
        value_template: >-
          {%- if states.sensor.piscina_off_time %}
            {{(((as_timestamp(strptime(states.sensor.piscina_off_time.state, "%Y-%m-%d, %H:%M"))-(states.sensor.piscina_filtering_time.state | float * 60 * 60)) // 60) * 60)|timestamp_custom("%Y-%m-%d, %H:%M")}}
          {%- endif %}
        icon_template: 'mdi:power-plug'
        entity_id: sensor.date_time, sensor.piscina_off_time, sensor.piscina_filtering_time

  - platform: filter
    name: piscina_filtered_realistic_water_temperature
    entity_id: sensor.piscina_water_temperature
    filters:
      - filter: outlier
        window_size: 10
        radius: 1.0
      - filter: lowpass
        time_constant: 10
      - filter: time_simple_moving_average
        window_size: 00:10
        precision: 2

  - platform: statistics
    name: piscina_temperature
    #entity_id: input_number.piscina_temperature
    entity_id: sensor.piscina_water_temperature
    sampling_size: 1440
    max_age:
      hours: 24
  
  # Use of the swimming pool pump today
  - platform: history_stats
    name: piscina_on_history
    entity_id: switch.motor_piscina
    state: 'on'
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'

  - platform: mqtt
    name: piscina_water_temperature
    state_topic: "tele/motor_piscina/SENSOR"
    value_template: "{{ value_json.DS18B20.Temperature | float + states.input_number.temperature_correction.state | float }}"
    unit_of_measurement: "ºC"

input_number:
  temperature_correction:
    name: 'Corrección temp.'
    unit_of_measurement: 'ºC'
    icon: 'mdi:thermometer-lines'
    min: -5
    max: 5
    step: 0.5
    mode: box

#  piscina_temperature:
#    name: Temp. agua
#    min: 0
#    max: 40
#    initial: 25
#    step: 0.1
#  #  mode: box
#    unit_of_measurement: 'ºC'
#    icon: 'mdi:thermometer'

automation:
  #############################################################
  # Turn on and off Swimming pool based on water temperature
  # and the valley price of electricity
  #############################################################
  
  - alias: 'Turn on swimming pool'
    trigger: 
      platform: template
      value_template: '{{states.sensor.date_time.state == states.sensor.piscina_on_time.state}}'
    action:
      service: switch.turn_on
      entity_id: switch.motor_piscina
  
  - alias: 'Turn off swimming pool'
    trigger: 
      platform: template
      value_template: '{{states.sensor.date_time.state == states.sensor.piscina_off_time.state}}'
    action:
      service: switch.turn_off
      entity_id: switch.motor_piscina
  
  - alias: 'Notify when swimming pool pump on more than 6 hours [Spring - Autumn - Winter]'
    trigger:
      platform: numeric_state
      entity_id: sensor.piscina_on_history
      above: 6
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: 'switch.motor_piscina'
          state: 'on'
        - condition: or
          conditions:
          - condition: state
            entity_id: sensor.season
            state: 'spring'
          - condition: state
            entity_id: sensor.season
            state: 'autumn'
          - condition: state
            entity_id: sensor.season
            state: 'winter'
    action:
      service: telegram_bot.send_message
      data:
        message: 'Motor piscina encendido hoy durante más de 6 horas'
        inline_keyboard: 
          - 'Apagar:/homeassistant.turn_off#switch.motor_piscina'
  
  - alias: 'Notify when swimming pool pump on more than 9 hours [Summer]'
    trigger:
      platform: numeric_state
      entity_id: sensor.piscina_on_history
      above: 9
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: 'switch.motor_piscina'
          state: 'on'
        - condition: state
          entity_id: sensor.season
          state: 'summer'
    action:
      service: telegram_bot.send_message
      data:
        message: 'Motor piscina encendido hoy durante más de 9 horas'
        inline_keyboard: 
          - 'Apagar:/homeassistant.turn_off#switch.motor_piscina'

script:
  turn_on_swimmingpool_light_ga:
    alias: 'Turn on swimming pool lights if off'
    sequence:
      - condition: state
        entity_id: switch.luz_piscina
        state: 'off'
      - service: switch.turn_on
        data:
          entity_id: switch.luz_piscina

  turn_off_swimmingpool_light_ga:
    alias: 'Turn off swimming pool lights if on'
    sequence:
      - condition: state
        entity_id: switch.luz_piscina
        state: 'on'
      - service: switch.turn_off
        data:
          entity_id: switch.luz_piscina
