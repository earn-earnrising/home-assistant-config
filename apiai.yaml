intents:
##############################################
# Heating intents
##############################################
  heating.check:
    speech: >
      {%- set status ={"on": "conectada", "off": "desconectada"} -%}
      La calefacción está {{ status[states("switch.termostato")] }}. {% if is_state("switch.termostato", "on") %}{% if states("climate.termostato") != "0"%} A una temperatura de {{ states("climate.termostato") }} grados.{% endif -%} {% if is_state_attr("climate.termostato", "operation_mode", "idle") %} No está en marcha{%- else %} Está en marcha{% endif -%}{%- if is_state("switch.termostato_modo_ausente", "on") %} y tiene el modo ausente activado.  {%- else %} y tiene el modo ausente desactivado. {% endif %}{% endif %}

  heating.status.set:
    speech: >
      {%- set status ={"on": "conectada", "off": "desconectada"} -%}
      ¡Hecho! calefacción {{ status[OnOff] }}
    async_action: false
    action:
      - service_template: 'switch.turn_{{ OnOff }}'
        entity_id: 'switch.termostato'

  heating.away_mode.set:
    speech: >
      {%- set status ={"on": "activado", "off": "desactivado"} -%}
      {% if is_state("switch.termostato", "on") %}
        {{status[OnOff]}}
      {% else %}¡Vaya!, No puedo cambiar el modo ausente de la calefacción porque está desconectada{% endif %}
    async_action: false
    action:
      - condition: state
        entity_id: switch.termostato
        state: 'on'
      - service_template: 'switch.turn_{{ OnOff }}'
        data_template:
          entity_id: 'switch.termostato_modo_ausente'

  heating.temperature.change.relative:
    speech: >
      {% if is_state("switch.termostato", "on") %}¡Entendido!, voy a {{ change.direction }} la temperatura de la calefacción {{ change.degrees }} {{ unit | replace("?","") }}. Ahora está a {{ states.climate.termostato.attributes.temperature}} grados{% else %}¡Vaya!, No puedo {{ change.direction }} la calefacción porque está desconectada{% endif %}
    async_action: false
    action:
      - condition: state
        entity_id: switch.termostato
        state: 'on'
      - service: climate.set_temperature
        data_template:
          entity_id: climate.termostato
          temperature: >
            {%- if change.direction == 'subir'-%}
              {{ states.climate.termostato.attributes.temperature + change.degrees | float }}
            {%- else -%}
              {{ states.climate.termostato.attributes.temperature - change.degrees | float }}
            {%- endif -%}

  heating.temperature.change.restore:
    speech: >
      {% if is_state("switch.termostato", "on") %}¡Perfecto! Estoy restaurando la programación normal en la calefaccción. {% else %}¡Vaya!, la calefacción está desconectada{% endif %}
    async_action: false
    action:
      - condition: state
        entity_id: switch.termostato
        state: 'on'
      - service_template: 'switch.turn_on'
        data_template:
          entity_id: 'switch.termostato_modo_ausente'
      - delay:
          seconds: 2
      - service_template: 'switch.turn_off'
        data_template:
          entity_id: 'switch.termostato_modo_ausente'
  
  heating.temperature.change.absolute:
    speech: >
      {% if is_state("switch.termostato", "on") %}¡Perfecto! He cambiado la temperatura de la calefacción a {{ change.degrees }} grados. {% else %}¡Vaya!, No puedo {{ change.set }} la calefacción porque está desconectada{% endif %}
    async_action: false
    action:
      - condition: state
        entity_id: switch.termostato
        state: 'on'
      - service: climate.set_temperature
        data_template:
          entity_id: climate.termostato
          temperature: '{{ change.degrees }}'

##############################################
# Climate intents
##############################################
  climate.check:
    speech: > 
      {% set locationPre,locationSensor = location.split(" ") %}
      {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_temperatura") != "unknown" -%}
        La temperatura en {{ location }} es de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_temperatura") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_temperatura"].attributes.unit_of_measurement }} 
        {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_humedad") != "unknown" %} con una humedad del {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_humedad") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_humedad"].attributes.unit_of_measurement }}.{% endif %}
        {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_max_temp") != "unknown" %} La temperatura máxima de hoy ha sido de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_max_temp") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_max_temp"].attributes.unit_of_measurement }}.{% endif %}
        {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_min_temp") != "unknown" %} La temperatura mínima de hoy ha sido de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_min_temp") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_min_temp"].attributes.unit_of_measurement }}.{% endif %}
        {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_co2") != "unknown" %} El nivel de C O 2 es de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_co2") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_co2"].attributes.unit_of_measurement }}.{% endif %}
        {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_ruido") != "unknown" %} El nivel de ruido es de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_ruido") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_ruido"].attributes.unit_of_measurement }}.{% endif %}
        {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_presion") != "unknown" %} La presión atmosférica es de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_presion") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_presion"].attributes.unit_of_measurement }}.{% endif %}
        {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_anemometro_velocidad_viento") != "unknown" %} Las rachas de viento son de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_anemometro_velocidad_viento") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_anemometro_velocidad_viento"].attributes.unit_of_measurement }}.{% endif %}
        {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia") != "unknown" %}{%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia") == "0" %} No está lloviendo.{% else %} Está lloviendo unos {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_pluviometro_lluvia"].attributes.unit_of_measurement }}.{% endif %}{% endif %}
        {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_1") != "unknown" %}{%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_1") == "0" %} No ha llovido durante la última hora.{% else %} La precipitación de la última hora ha sido de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_1") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_1"].attributes.unit_of_measurement }}.{% endif %}{% endif %}
        {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_24") != "unknown" %}{%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_24") == "0" %} No ha llovido durante las últimas 24 horas.{% else %} La precipitación de las últimas 24 horas ha sido de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_24") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_24"].attributes.unit_of_measurement }}.{% endif %}{% endif %}
      {%- else -%}
        ¡Vaya! No tengo ningún sensor de temperatura en {{ location }}.
      {% endif %}

##############################################
# Fence intents
##############################################
  fence.check:
    speech: >
      {%- set status ={"Abierta": "cerrarla", "Cerrada": "abrirla"} -%}
      La barrera está {{states("sensor.entrada_barrera")}}. ¿Quieres {{ status[states("sensor.entrada_barrera")] }}?

  fence.change:
    speech: >
      {%- set status ={"Abierta": "cerrado", "Cerrada": "abierto"} -%}
      {%- if operation == "abrir"-%}
        {%- if is_state("sensor.entrada_barrera", "Abierta") -%}
          La barrera ya está abierta
        {%- else -%}
          He abierto la barrera
        {%- endif -%}
      {%- elif operation == "cerrar" -%}
        {%- if is_state("sensor.entrada_barrera", "Cerrada") -%}
          La barrera ya está cerrada
        {%- else -%}
          He cerrado la barrera
        {%- endif -%}
      {%- else -%}
          He {{ status[states("sensor.entrada_barrera")] }} la barrera
      {%- endif -%}
    async_action: false
    action:
    - service_template: >
        {%- if (is_state("sensor.entrada_barrera", "Abierta") and  operation == "cerrar") or (is_state("sensor.entrada_barrera", "Cerrada") and operation == "abrir") or (operation is not defined) -%}
          homeassistant.turn_on
        {%- endif -%}

      data:
        entity_id: switch.barrera

##############################################
# Light intents
##############################################
#  light.check:
#    speech: >

##############################################
# Various intents
##############################################
  device.turnOnOff:
    speech: >
      {%- set status = {"on": "encendido", "off": "apagado"} -%}
      {%- set statusAction = {"on": "encender", "off": "apagar"} -%}
      {%- set validEntities = {"switch.termostato": "la calefacción",
                               "switch.termostato_modo_ausente": "el modo ausente",
                               "switch.piscina": "el motor de la piscina",
                               "group.luces_exteriores": "las luces exteriores",
                               "group.luces_interiores": "las luces interiores",
                               "switch.swiid_swiidinter_switch_3_0": "la lámpara del recibidor",
                               "switch.fibaro_system_fgs223_double_relay_switch_7_0": "las luces de la escalera",
                               "switch.fibaro_system_fgs223_double_relay_switch_7_0_2": "la luz de la suite",
                               "switch.caseta_camara_deteccion_movimiento": "el detector de movimiento de la caseta",
                               "switch.piscina_camara_deteccion_movimiento": "el detector de movimiento de la piscina",
                               "switch.recibidor_camara_deteccion_movimiento": "el detector de movimiento del recibidor",
                               "input_boolean.salon_detector_movimiento": "el detector de movimiento del salón",
                               "input_boolean.cocina_sensor_puerta": "el sensor de apertura de la puerta de la cocina",
                               "switch.holiday": "el modo vacaciones",
                               "switch.ups_beeper": "el pitido del SAI",
                               "group.seguridad": "el sistema de seguridad"} -%}
      {% if validEntities[device] %}
        Hecho! He {{ status[targetState] }} {{validEntities[device]}}
      {% else %}
        ¡Vaya!. Esto no se puede {{statusAction[targetState]}}
      {% endif %}
    async_action: false
    action:
    - service_template: >
        {%- set validEntities = {"switch.termostato": "la calefacción",
                                 "switch.termostato_modo_ausente": "el modo ausente",
                                 "switch.piscina": "el motor de la piscina",
                                 "group.luces_exteriores": "las luces exteriores",
                                 "group.luces_interiores": "las luces interiores",
                                 "switch.swiid_swiidinter_switch_3_0": "la lámpara del recibidor",
                                 "switch.fibaro_system_fgs223_double_relay_switch_7_0": "las luces de la escalera",
                                 "switch.fibaro_system_fgs223_double_relay_switch_7_0_2": "la luz de la suite",
                                 "switch.caseta_camara_deteccion_movimiento": "el detector de movimiento de la caseta",
                                 "switch.piscina_camara_deteccion_movimiento": "el detector de movimiento de la piscina",
                                 "switch.recibidor_camara_deteccion_movimiento": "el detector de movimiento del recibidor",
                                 "input_boolean.salon_detector_movimiento": "el detector de movimiento del salón",
                                 "input_boolean.cocina_sensor_puerta": "el sensor de apertura de la puerta de la cocina",
                                 "switch.holiday": "el modo vacaciones",
                                 "switch.ups_beeper": "el pitido del SAI",
                                 "group.seguridad": "el sistema de seguridad"} -%}
        {% if validEntities[device] %}
           homeassistant.turn_{{targetState}}
        {% endif %}

      data_template:
        entity_id: '{{device}}'

  authorized.person:
    speech: >
      {%- set timestamp = strptime(time, '%H:%M:%S')-%}
      {%- set targetTime = now().replace(hour=timestamp.hour).replace(minute=timestamp.minute).replace(second=timestamp.second)-%}
      {%- set minutes = ((as_timestamp(targetTime) - as_timestamp(now())) | int) // 60 -%}
      {%- if minutes > 0 -%}
        Activada persona autorizada durante {{ minutes }} minutos
      {%- else -%}
        No puedo activar una persona autorizada en el pasado.
      {%- endif -%}
    async_action: false
    action:
    - service_template: >
        {%- set timestamp = strptime(time, '%H:%M:%S')-%}
        {%- set targetTime = now().replace(hour=timestamp.hour).replace(minute=timestamp.minute).replace(second=timestamp.second)-%}
        {%- set minutes = ((as_timestamp(targetTime) - as_timestamp(now())) | int) // 60 -%}
        {%- if minutes > 0 -%}
          input_slider.select_value
        {%- endif -%}

      data_template:
       entity_id: input_slider.empty_home_activation_delay_minutes
       value: >
        {%- set timestamp = strptime(time, '%H:%M:%S')-%}
        {%- set targetTime = now().replace(hour=timestamp.hour).replace(minute=timestamp.minute).replace(second=timestamp.second)-%}
        {%- set minutes = ((as_timestamp(targetTime) - as_timestamp(now())) | int) // 60 | float -%}
        {%- if minutes > 0 -%}
          {{ minutes }}
        {%- endif -%}
    - service_template: >
        {%- set timestamp = strptime(time, '%H:%M:%S')-%}
        {%- set targetTime = now().replace(hour=timestamp.hour).replace(minute=timestamp.minute).replace(second=timestamp.second)-%}
        {%- set minutes = ((as_timestamp(targetTime) - as_timestamp(now())) | int) // 60 -%}
        {%- if minutes > 0 -%}
          homeassistant.turn_on
        {%- endif -%}

      data:
        entity_id: input_boolean.empty_home_activation_delay

  shift.geni.check:
    speech: >
       {%- if is_state("sensor.next_shift_event", "Saliente") -%}
         {{name_original}} está hoy saliente de noche
       {%- else -%}
         {% set diff = as_timestamp(states.calendar.turnos_geni_everything.attributes.start_time) - as_timestamp(now().replace(hour=0).replace(minute=0).replace(second=0).replace(microsecond=0)) %}
         {%- if diff < 86400 -%}
           {{name_original}} trabaja hoy por la {{ states("sensor.next_shift_event") }}
         {%- elif diff >= 86400 and diff < 86400*2 -%}
           {{name_original}} trabaja mañana por la {{ states("sensor.next_shift_event") }}
         {%- else -%}
           {{name_original}} trabaja el próximo {{ states("sensor.next_shift_date") }} por la {{ states("sensor.next_shift_event") }}
         {% endif %}
       {% endif %}

  presence.geni.check:
    speech: >
      {%- if is_state("device_tracker.geni_combined", "home") -%}
        Parece que {{name_original}} está en casa.
      {%- else -%}
        Pues parece que {{name_original}} no está en casa.
      {%- endif -%}

  goodnight.check:
    speech: >
      {%- if is_state("sensor.cocina_sensor_puerta", "Abierta") %}Puerta de la cocina abierta. {% endif -%}{% if is_state("sensor.entrada_barrera", "Abierta") %}Te has dejado la barrera abierta, la voy a cerrar. {% endif -%}Buenas noches.
    async_action: true
    action:
      # Only execute between 21:00 and 6:00
      - condition: time
        after: '21:00'
        before: '6:00'
      # Turn off stairs lights
      - service: switch.turn_on
        data:
          entity_id: switch.fibaro_system_fgs223_double_relay_switch_7_0
      # Turn off outside lights
      - service: light.turn_off
        data:
          entity_id: group.luces_exteriores
      # Turn off hall lamp
      - service: switch.turn_off
        data:
          entity_id: switch.swiid_swiidinter_switch_3_0
      # Close fence if open
      - service_template: >
          {%- if is_state("sensor.entrada_barrera", "Abierta") -%}
            homeassistant.turn_on
          {%- endif -%}
 
        data:
          entity_id: switch.barrera
      # Wait 1 minute before turning off stair lights
      - delay:
          minutes: 1
      # Turn off stairs lights
      - service: switch.turn_off
        data:
          entity_id: switch.fibaro_system_fgs223_double_relay_switch_7_0  