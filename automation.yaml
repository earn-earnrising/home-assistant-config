#############################################################
# Presence automations
#############################################################

# Empty home automation when no one of the Familia group is at home
- alias: 'Empty home'
  trigger:
    platform: state
    entity_id: group.unidad_familiar
    state: 'not_home'
  action:
    - service: script.turn_on
      data:
        entity_id: script.empty_home

# Someone home automation when someone of the Familia group is at home
- alias: 'Someone home'
  trigger:
    platform: state
    entity_id: group.unidad_familiar
    state: 'home'
  action:
    - service: script.turn_on
      data:
        entity_id: script.someone_home

# Turn on hall lamp when someone at home and the sun is set
- alias: 'Turn on hall lamp when someone at home and the sun is set'
  trigger:
    platform: state
    entity_id: group.unidad_familiar
    state: 'home'
  condition:
    condition: sun
    after: sunset
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.swiid_swiidinter_switch_3_0

# When input_boolean.empty_home_activation_delay turns on,
# Change virtual_device location to home
# Wait the specified amount of minutes 
# Turn off input_boolean.empty_home_activation_delay
- alias: 'empty_home_activation_delay on'
  trigger:
    platform: state
    entity_id: input_boolean.empty_home_activation_delay
    state: 'on'
  action:
    - service: device_tracker.see
      data:
        dev_id: 'virtual_device'
        location_name: 'home'
    - service: notify.telegram
      data_template:
        message: >
          Activada persona autorizada durante {{ (states.input_slider.empty_home_activation_delay_minutes.state | int) // 60 }} hora(s) y {{ (states.input_slider.empty_home_activation_delay_minutes.state | int) % 60 }} minutos
    - delay: '{{ (states.input_slider.empty_home_activation_delay_minutes.state | int) // 60 }}:{{ (states.input_slider.empty_home_activation_delay_minutes.state | int) % 60 }}'
    - service: homeassistant.turn_off
      data:
        entity_id: input_boolean.empty_home_activation_delay

# When input_boolean.empty_home_activation_delay turns off,
# Change virtual_device location to not_home
- alias: 'empty_home_activation_delay off'
  trigger:
    platform: state
    entity_id: input_boolean.empty_home_activation_delay
    state: 'off'
  action:
    - service: device_tracker.see
      data:
        dev_id: 'virtual_device'
        location_name: 'not_home'

# Turn Ana status to home at 7:00 if she's not home and the shift in calendar is "Mañana" or "Saliente"
- alias: 'Ana home'
  trigger:
    platform: time
    after: '07:00:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: 'device_tracker.ana'
        state: 'not_home'
      - condition: or
        conditions:
        - condition: state
          entity_id: 'calendar.turnos_geni_manyana'
          state: 'on'
        - condition: state
          entity_id: 'calendar.turnos_geni_saliente'
          state: 'on'
  action:
    - service: device_tracker.see
      data:
        dev_id: 'ana'
        location_name: 'home'

# Turn Ana status to home at 11:00 if she's at home and the shift in calendar is "Mañana" or "Saliente"
- alias: 'Ana not home'
  trigger:
    platform: time
    after: '11:00:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: 'device_tracker.ana'
        state: 'home'
      - condition: or
        conditions:
        - condition: state
          entity_id: 'calendar.turnos_geni_manyana'
          state: 'on'
        - condition: state
          entity_id: 'calendar.turnos_geni_saliente'
          state: 'on'
  action:
    - service: device_tracker.see
      data:
        dev_id: 'ana'
        location_name: 'not_home'

# Set Jordi as driving when the event "enter" for "-toyota" is published to mqtt
# Delay is needed to avoid re-set the status to "home" when I enter the car at home.
- alias: 'Jordi driving status'
  trigger:
    platform: mqtt
    topic: owntracks/hokusphone/hokusphone/event
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ trigger.payload_json.desc == '-toyota' }}"
      - condition:  template
        value_template: "{{ trigger.payload_json.event == 'enter' }}"
  action:
    - delay:
        seconds: 1
    - service: device_tracker.see
      data:
        dev_id: 'jordi_combined'
        location_name: 'En ruta'

# Restore Jordi state when the event "leave" for "-toyota" is published to mqtt
- alias: 'Jordi restore status'
  trigger:
    platform: mqtt
    topic: owntracks/hokusphone/hokusphone/event
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ trigger.payload_json.desc == '-toyota' }}"
      - condition:  template
        value_template: "{{ trigger.payload_json.event == 'leave' }}"
  action:
    - service: device_tracker.see
      data_template:
        dev_id: 'jordi_combined'
        location_name: '{{ states.device_tracker.hokusphone_hokusphone.state }}'

# Set Jordi as home when at least ONE of related entities are set to home
- alias: 'Jordi home'
  trigger:
    platform: state
    entity_id: device_tracker.hokusphone_nmap, device_tracker.hokusphone_hokusphone
    #, sensor.hokusphone_nut
    #, device_tracker.alta
    state: 'home'
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: 'device_tracker.hokusphone_nmap'
        state: 'home'
      - condition: state
        entity_id: 'device_tracker.hokusphone_hokusphone'
        state: 'home'
#      - condition: state
#        entity_id: 'sensor.hokusphone_nut'
#        state: 'home'
#      - condition: state
#        entity_id: 'device_tracker.alta'
#        state: 'home'
  action:
    - service: device_tracker.see
      data:
        dev_id: 'jordi_combined'
        location_name: 'home'

# Set Jordi the location of device_tracker.hokusphone_hokusphone when ALL related
# entities are in a state different from home and not driving
- alias: 'Jordi not home'
  trigger:
    platform: state
    entity_id: device_tracker.hokusphone_nmap, device_tracker.hokusphone_hokusphone
    #, sensor.hokusphone_nut
    #, device_tracker.alta
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ not(is_state('device_tracker.hokusphone_nmap', 'home')) }}"
      - condition: template
        value_template: "{{ not(is_state('device_tracker.hokusphone_hokusphone', 'home')) }}"
      - condition: template
        value_template: "{{ not(is_state('device_tracker.jordi_combined', 'En ruta')) }}"
#      - condition: template
#        value_template: "{{ not(is_state('sensor.hokusphone_nut', 'home')) }}"
#      - condition: template
#        value_template: "{{ not(is_state('device_tracker.alta', 'home')) }}"
  action:
    - service: device_tracker.see
      data_template:
        dev_id: 'jordi_combined'
        location_name: '{{ states.device_tracker.hokusphone_hokusphone.state }}'

# Set Geni as home when at least ONE of related entities are set to home
- alias: 'Geni home'
  trigger:
    platform: state
    entity_id: device_tracker.geni_nmap, device_tracker.flex_2
    state: 'home'
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: 'device_tracker.geni_nmap'
        state: 'home'
      - condition: state
        entity_id: 'device_tracker.flex_2'
        state: 'home'
  action:
    - service: device_tracker.see
      data:
        dev_id: 'geni_combined'
        location_name: 'home'

# Set Geni the location of device_tracker.geni_nmap when ALL related entities are in a state different from home
- alias: 'Geni not home'
  trigger:
    platform: state
    entity_id: device_tracker.geni_nmap
    #, device_tracker.flex_2
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ not(is_state('device_tracker.geni_nmap', 'home')) }}"
      - condition: template
        value_template: "{{ not(is_state('device_tracker.flex_2', 'home')) }}"
  action:
    - service: device_tracker.see
      data_template:
        dev_id: 'geni_combined'
        location_name: '{{ states.device_tracker.geni_nmap.state }}'

- alias: 'Open fence'
  trigger:
    - platform: state
      entity_id: device_tracker.hokusphone_hokusphone
      to: 'home'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.entrada_barrera
        state: 'Cerrada'
      - condition: state
        entity_id: device_tracker.jordi_combined
        state: 'En ruta'
  action:
    - service: notify.telegram
      data:
        message: '[Fake] Puerta abierta automáticamente'
#   - service: switch.turn_on
#     entity_id: switch.barrera

- alias: 'Refresh location when fence is Open and not at home'
  trigger:
    platform: state
    entity_id: sensor.entrada_barrera
    state: 'Abierta'
  condition:
    condition: template
    value_template: "{{ not(is_state('device_tracker.jordi_combined', 'home')) }}"
  action:
    - service: script.turn_on
      data:
        entity_id: script.refresh_location

#############################################################
# Heating automations
#############################################################

# When the switch.termostato changes to on
- alias: 'Heating on'
  trigger:
    platform: state
    entity_id: switch.termostato
    state: 'on'
  action:
    # Turn on thermostat
    - service: script.turn_on
      entity_id: script.power_on_thermostat

# When the switch.termostato changes to off
- alias: 'Heating off'
  trigger:
    platform: state
    entity_id: switch.termostato
    state: 'off'
  action:
    # Turn off thermostat
    - service: script.turn_on
      entity_id: script.power_off_thermostat

#############################################################
# Holiday automations
#############################################################

# Enters on holiday mode based on google calendar event
- alias: 'Calendar holiday mode'
  trigger:
    platform: state
    entity_id: calendar.holiday_mode
    from: 'off'
    to: 'on'
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.holiday

# Exits on holiday mode based on google calendar event
- alias: 'Calendar holiday mode exit'
  trigger:
    platform: state
    entity_id: calendar.holiday_mode
    from: 'on'
    to: 'off'
  action:
    - service: switch.turn_off
      data:
        entity_id: switch.holiday

# Enters holiday mode based on switch
- alias: 'Switch holiday mode'
  trigger:
    platform: state
    entity_id: switch.holiday
    from: 'off'
    to: 'on'
  condition:
    condition: state
    entity_id: switch.termostato
    state: 'on'
  action:
    # Turn off thermostat
    - service: script.turn_on
      entity_id: script.power_off_thermostat
    - service: notify.telegram
      data:
        message: 'Modo vacaciones activado'

# Exits holiday mode based on switch
- alias: 'Exit holiday mode'
  trigger:
    platform: state
    entity_id: switch.holiday
    from: 'on'
    to: 'off'
  condition:
    condition: state
    entity_id: switch.termostato
    state: 'on'
  action:
    # Turn on thermostat an set it to away mode
    - service: climate.set_away_mode
      entity_id: climate.termostato
      data:
        away_mode: true
    - service: notify.telegram
      data:
        message: 'Modo vacaciones desactivado'

#############################################################
# Alarm automations
#############################################################

# Disable alarm for recibidor after 30 seconds of detection
- alias: 'Disable alarm for recibidor'
  trigger:
    platform: state
    entity_id: binary_sensor.recibidor_camara_deteccion_movimiento
    state: 'on'
  action:
    - delay:
        seconds: 30
    - service: mqtt.publish
      data:
        payload: 0
        retain: true
        topic: 'home/camera/recibidor/alarm'

# Disable alarm for piscina after 30 seconds of detection
- alias: 'Disable alarm for piscina'
  trigger:
    platform: state
    entity_id: binary_sensor.piscina_camara_deteccion_movimiento
    state: 'on'
  action:
    - delay:
        seconds: 30
    - service: mqtt.publish
      data:
        payload: 0
        retain: true
        topic: 'home/camera/piscina/alarm'

# Disable alarm for caseta after 30 seconds of detection
- alias: 'Disable alarm for caseta'
  trigger:
    platform: state
    entity_id: binary_sensor.caseta_camara_deteccion_movimiento
    state: 'on'
  action:
    - delay:
        seconds: 30
    - service: mqtt.publish
      data:
        payload: 0
        retain: true
        topic: 'home/camera/caseta/alarm'

# Notify kitchen door opened when notification active
- alias: 'Notify kitchen door opened when notification active'
  trigger: 
    platform: state
    entity_id: sensor.cocina_sensor_puerta
    from: 'Cerrada'
    to: 'Abierta'
  condition:
    condition: state
    entity_id: input_boolean.cocina_sensor_puerta
    state: 'on'
  action:
    service: notify.telegram
    data:
      message: 'Puerta de la cocina abierta'

# Notify living room motion detection when notification active
- alias: 'Notify living room motion detection when notification active'
  trigger: 
    platform: state
    entity_id: binary_sensor.salon_detector_movimiento_detectado
    to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.salon_detector_movimiento
    state: 'on'
  action:
    service: notify.telegram
    data:
      message: 'Movimiento detectado en el salón'

# Notify living room motion sensor tampering
- alias: 'Notify living room motion sensor tampering'
  trigger: 
    platform: state
    entity_id: binary_sensor.salon_detector_movimiento_sabotaje
    to: 'on'
  action:
    service: notify.telegram
    data:
      message: 'El sensor de movimento del salón se ha manipulado'

#############################################################
# Light automations
#############################################################

# On turn on outside lights, adjust brightness
- alias: 'Luces exteriores on turn on - Adjust Brightness'
  trigger:
    platform: state
    entity_id: group.luces_exteriores
    state: 'on'
  action:
    - service: light.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((states.input_slider.entrada_luz_brillo.state | int) * 255) // 100 }}'

# Adjust luces exteriores brightness
- alias: 'Luces exteriores - Adjust Brightness'
  trigger:
    platform: state
    entity_id: input_slider.entrada_luz_brillo
  condition:
    condition: state
    entity_id: group.luces_exteriores
    state: 'on'
  action:
    - service: light.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((trigger.to_state.state | int) * 255) // 100 }}'

# Turn on outside lights at sunset (+15 minutes)
- alias: 'Sunset Lights'
  trigger:
    platform: sun
    event: 'sunset'
    offset: '00:15:00'
  action:
    - service: light.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((states.input_slider.entrada_luz_brillo.state | int) * 255) // 100 }}'

# Turn off outside lights at night (at 00:15)
- alias: 'Turn off lights at night'
  trigger:
    platform: time
    after: '00:15'
  condition:
    condition: state
    entity_id: group.luces_exteriores
    state: 'on'
  action:
    service: light.turn_off
    entity_id: group.luces_exteriores
  
# When the outside lights have been turned on at late night (later than 00:15) and before 9AM, turn them off after 5 minutes
- alias: 'Turn off lights at late night'
  trigger:
    platform: state
    entity_id: group.luces_exteriores
    state: 'on'
  condition:
    - condition: time
      after: '00:15'
      before: '9:00'
    - condition: state
      entity_id: group.luces_exteriores
      state: 'on'
  action:
    - delay:
        minutes: 5
    - service: light.turn_off
      data:
        entity_id: group.luces_exteriores

# Turn off outside lights after 10 seconds when the sun is not set
- alias: 'Turn off lights when sun not set'
  trigger:
    platform: state
    entity_id: group.luces_exteriores
    state: 'on'
  condition:
    - condition: sun
      after: sunrise
    - condition: sun
      before: sunset
  action:
    - delay:
        seconds: 10
    - service: light.turn_off
      data:
        entity_id: group.luces_exteriores

# Turn on outside lights when fence is opened and the sun is set.
- alias: 'Turn on lights when fence open'
  trigger:
    platform: state
    entity_id: sensor.entrada_barrera
    state: 'Abierta'
  condition:
    condition: or
    conditions:
    - condition: sun
      after: sunset
    - condition: sun
      before: sunrise
  action:
    - service: light.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((states.input_slider.entrada_luz_brillo.state | int) * 255) // 100 }}'

# Turn on hall lamp when the sun is set and someone at home
- alias: 'Turn on hall lamp when the sun is set and someone at home'
  trigger:
    platform: sun
    event: sunset
  condition:
    condition: state
    entity_id: group.unidad_familiar
    state: 'home'
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.swiid_swiidinter_switch_3_0

#############################################################
# Power automations
#############################################################

# Notify when a power cut longer than 1 minute detected
- alias: 'Notify power cut'
  trigger:
    platform: state
    entity_id: binary_sensor.ups_status_bs
    to: 'off'
    for:
      minutes: 1
  action:
    - service: notify.telegram
      data:
        message: 'Corte en el suministro eléctrico detectado'

# Restart UPS driver controller when a power cut is detected.
# I've added this automation because from time to time the controller stops working until it's restarted.
- alias: 'Restart UPS Driver Controller'
  trigger:
    platform: state
    entity_id: binary_sensor.ups_status_bs
    to: 'off'
  action:
    - service: notify.telegram
      data:
        message: 'Controlador SAI reiniciado'
    - service: shell_command.restart_ups_driver_controller

# Notify when the power is back normal
- alias: 'Notify power ok'
  trigger:
    platform: state
    entity_id: binary_sensor.ups_status_bs
    to: 'on'
  action:
    service: notify.telegram
    data:
      message: 'Suministro eléctrico reestablecido'

# Notify when the UPS battery has to be replaced
- alias: 'Notify ups battery replacement'
  trigger:
    platform: state
    entity_id: sensor.ups_status
    to: 'Reemplazar batería'
  action:
    service: notify.telegram
    data:
      message: 'Batería del SAI agotándose, reemplazar'

#############################################################
# Fence automations
#############################################################
- alias: 'When fence open notify every 10 minutes'
  trigger:
    platform: time
    minutes: '/1'
    seconds: 00
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.entrada_barrera
        state: 'Abierta'
      - condition: template
        value_template: '{{ ((as_timestamp(now()) - as_timestamp(states.sensor.entrada_barrera.last_changed))//60)%10 == 0 }}'
      - condition: template
        value_template: '{{ ((as_timestamp(now()) - as_timestamp(states.sensor.entrada_barrera.last_changed))//60) != 0 }}'
  action:
    - service: tts.google_say
      entity_id: media_player.homeassistant
      data_template:
        message: 'Barrera {{ states.sensor.entrada_barrera.state }} durante más de {{ (as_timestamp(now()) - as_timestamp(states.sensor.entrada_barrera.last_changed))|int//60 }} minutos'
        cache: false
    - service: notify.telegram
      data_template:
        message: 'Barrera {{ states.sensor.entrada_barrera.state }} durante más de {{ (as_timestamp(now()) - as_timestamp(states.sensor.entrada_barrera.last_changed))|int//60 }} minutos'

#############################################################
# Swimming pool turn on
# In the morning at 7:00
# At night at 23:00
#############################################################

# Turn on swimming pool pump [morning]
- alias: 'Turn on swimming pool pump [morning]'
  trigger:
    platform: time
    after: '04:00:00'
  action:
    service: switch.turn_on
    entity_id: switch.piscina

# Turn on swimming pool pump [afternoon]
- alias: 'Turn on swimming pool pump [afternoon]'
  trigger:
    platform: time
    after: '23:00:00'
  action:
    service: switch.turn_on
    entity_id: switch.piscina

#############################################################
# Swimming pool turn off

# In the morning while winter at 5:00 (1 hour)
# At night while winter at 00:00 (1 hour)

# In the morning while spring or autumn at 6:00 (2 hours)
# At night while spring or autumn at 01:00 (2 hours)

# In the morning while summer at 7:00 (3 hours)
# At night while summer at 02:00 (3 hours)
#############################################################

# Turn off swimming pool pump [morning / Winter]
- alias: 'Turn off swimming pool pump [morning / Winter]'
  trigger:
    platform: time
    after: '05:00:00'
  condition:
    - condition: state
      entity_id: sensor.season
      state: 'Winter'
  action:
    service: switch.turn_off
    entity_id: switch.piscina

# Turn off swimming pool pump [afternoon / Winter]
- alias: 'Turn off swimming pool pump [afternoon / Winter]'
  trigger:
    platform: time
    after: '00:00:00'
  condition:
    - condition: state
      entity_id: sensor.season
      state: 'Winter'
  action:
    service: switch.turn_off
    entity_id: switch.piscina

# Turn off swimming pool pump [morning / Spring - Autumn]
- alias: 'Turn off swimming pool pump [morning / Spring - Autumn]'
  trigger:
    platform: time
    after: '06:00:00'
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: sensor.season
      state: 'Spring'
    - condition: state
      entity_id: sensor.season
      state: 'Autumn'
  action:
    service: switch.turn_off
    entity_id: switch.piscina

# Turn off swimming pool pump [afternoon / Spring - Autumn]
- alias: 'Turn off swimming pool pump [afternoon / Spring - Autumn]'
  trigger:
    platform: time
    after: '01:00:00'
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: sensor.season
      state: 'Spring'
    - condition: state
      entity_id: sensor.season
      state: 'Autumn'
  action:
    service: switch.turn_off
    entity_id: switch.piscina

# Turn off swimming pool pump [morning / Summer]
- alias: 'Turn off swimming pool pump [morning / Summer]'
  trigger:
    platform: time
    after: '07:00:00'
  condition:
    - condition: state
      entity_id: sensor.season
      state: 'Summer'
  action:
    service: switch.turn_off
    entity_id: switch.piscina

# Turn off swimming pool pump [afternoon / Summer]
- alias: 'Turn off swimming pool pump [afternoon / Summer]'
  trigger:
    platform: time
    after: '02:00:00'
  condition:
    - condition: state
      entity_id: sensor.season
      state: 'Summer'
  action:
    service: switch.turn_off
    entity_id: switch.piscina

- alias: 'Notify when swimming pool pump on more than 4 hours [Winter]'
  trigger:
    platform: numeric_state
    entity_id: sensor.piscina_on_history
    above: 4
  condition:
    - condition: state
      entity_id: sensor.season
      state: 'Winter'
  action:
    service: notify.telegram
    data:
      message: 'Motor piscina encendido durante más de 4 horas en las últimas 24h'

- alias: 'Notify when swimming pool pump on more than 6 hours [Spring - Autumn]'
  trigger:
    platform: numeric_state
    entity_id: sensor.piscina_on_history
    above: 6
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: sensor.season
      state: 'Spring'
    - condition: state
      entity_id: sensor.season
      state: 'Autumn'
  action:
    service: notify.telegram
    data:
      message: 'Motor piscina encendido durante más de 6 horas en las últimas 24h'

- alias: 'Notify when swimming pool pump on more than 8 hours [Summer]'
  trigger:
    platform: numeric_state
    entity_id: sensor.piscina_on_history
    above: 8
  condition:
    - condition: state
      entity_id: sensor.season
      state: 'Summer'
  action:
    service: notify.telegram
    data:
      message: 'Motor piscina encendido durante más de 8 horas en las últimas 24h'

#############################################################
# Other automations
#############################################################

- alias: 'Notify bitcoin price above threshold'
  trigger:
    platform: numeric_state
    entity_id: sensor.exchange_rate_1_btc
    above: 1200
  action:
    service: notify.telegram
    data_template:
      message: 'Bitcoin ha llegado a un valor de {{states.sensor.exchange_rate_1_btc.state}} {{states.sensor.exchange_rate_1_btc.attributes.unit_of_measurement}}'

- alias: 'Notify for every new device'
  trigger:
    platform: event
    event_type: device_tracker_new_device
  action:
    - service: notify.telegram
      data_template:
        message: 'Nuevo dispositivo encontrado {{ trigger.event.data }}'

- alias: 'Update Notification'
  trigger:
    - platform: state
      entity_id: updater.updater
  action:
    - service: notify.telegram
      data_template:
        message: 'Nueva versión {{ states.updater.updater.state }} de Home Assistant disponible.'

#############################################################
# Nodon Octan automations
#############################################################
- alias: Nodon Octan button 1 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: nodon_crc3100_octan_remote_8
      scene_id: 10
  action:
    - service: script.turn_on
      data:
        entity_id: script.leave_home

- alias: Nodon Octan button 2 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: nodon_crc3100_octan_remote_8
      scene_id: 20
  action:
    - service: script.turn_on
      data:
        entity_id: script.parte_meteorologico

- alias: Nodon Octan button 3 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: nodon_crc3100_octan_remote_8
      scene_id: 30
  action:
    - service: switch.turn_off
      data:
        entity_id: group.luces_interiores

- alias: Nodon Octan button 4 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: nodon_crc3100_octan_remote_8
      scene_id: 40
  action:
    - service: script.turn_on
      data:
        entity_id: script.set_virtual_device_home

#############################################################
# Swarm automations
#############################################################

## Check in at school
#- alias: 'Checkin at Colegio'
#  trigger:
#    platform: zone
#    entity_id: device_tracker.jordi_combined
#    zone: zone.colegio
#    event: enter
#  action:
#    service: foursquare.checkin
#    data:
#      venueId: !secret foursquare_colegio_venue_id
## Check in at oficina
#- alias: 'Checkin at Oficina'
#  trigger:
#    platform: zone
#    entity_id: device_tracker.jordi_combined
#    zone: zone.colegio
#    event: enter
#  action:
#    service: foursquare.checkin
#    data:
#      venueId: !secret foursquare_office_venue_id
