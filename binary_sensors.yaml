# Infrared status for foscam cam in hall
- platform: command_line
  # Command used to get infrared status for a foscam camera:
  # 'curl -k --silent "https://<cam_host>:<cam_port>/cgi-bin/cgi-bin/CGIProxy.fcgi?cmd=getDevState&usr=<username>&pwd=<password>" | grep -oP "(?<=infraLedState>).*?(?=</infraLedState>)"'
  command: !secret cam_recibidor_infrared_command
  name: recibidor_camara_infrarrojo
  payload_on: '1'
  payload_off: '0'
  #device_class: light

# Infrared status for foscam cam in swimming pool
- platform: command_line
  # Command used to get infrared status for a foscam camera:
  # 'curl -k --silent "https://<cam_host>:<cam_port>/cgi-bin/cgi-bin/CGIProxy.fcgi?cmd=getDevState&usr=<username>&pwd=<password>" | grep -oP "(?<=infraLedState>).*?(?=</infraLedState>)"'
  command: !secret cam_piscina_infrared_command
  name: piscina_camara_infrarrojo
  payload_on: '1'
  payload_off: '0'
  #device_class: light

# Infrared status for foscam cam in bbq
- platform: command_line
  # Command used to get infrared status for a foscam camera:
  # 'curl -k --silent "https://<cam_host>:<cam_port>/cgi-bin/cgi-bin/CGIProxy.fcgi?cmd=getDevState&usr=<username>&pwd=<password>" | grep -oP "(?<=infraLedState>).*?(?=</infraLedState>)"'
  command: !secret cam_barbacoa_infrared_command
  name: barbacoa_camara_infrarrojo
  payload_on: '1'
  payload_off: '0'
  #device_class: light

- platform: template
  sensors:
    ups_status_bs:
      device_class: plug
      value_template: "{{ states.sensor.nut_ups_status_data.state == 'OL' or states.sensor.nut_ups_status_data.state == 'OL CHRG' }}"
      delay_off:
        seconds: 30
    comfort_state:
      device_class: heat
      friendly_name: 'Auto confort'
      value_template: "{{ states('sensor.temperature_first_floor')|float < states.climate.termostato.attributes.temperature|float and is_state('group.unidad_familiar', 'home') and is_state('switch.termostato', 'on') and is_state('switch.termostato_modo_ausente','off') and is_state_attr('climate.termostato', 'operation_mode', 'idle') and is_state('binary_sensor.primera_planta_temperatura_descendiendo','on') }}"
      delay_off:
          minutes: 90

# Alarm status for foscam cam in hall
- platform: mqtt
  state_topic: 'home/camera/recibidor/alarm'
  name: 'recibidor_camara_det_mov'
  device_class: motion
  # 0: No alarm
  # 1: Alarm triggered
  value_template: >-
          {%- if value != "0" %}
              ON
          {% else %}
              OFF
          {%- endif %}

# Alarm status for foscam cam in swimming pool
- platform: mqtt
  state_topic: 'home/camera/piscina/alarm'
  name: 'piscina_camara_det_mov'
  device_class: motion
  # 0: No alarm
  # 1: Alarm triggered
  value_template: >-
          {%- if value != "0" %}
              ON
          {% else %}
              OFF
          {%- endif %}

# Alarm status for foscam cam in bbq
- platform: mqtt
  state_topic: 'home/camera/barbacoa/alarm'
  name: 'barbacoa_camara_det_mov'
  device_class: motion
  # 0: No alarm
  # 1: Alarm triggered
  value_template: >-
          {%- if value != "0" %}
              ON
          {% else %}
              OFF
          {%- endif %}

# Alarm status for Linksys cam in caseta
- platform: mqtt
  state_topic: 'home/camera/caseta/alarm'
  name: 'caseta_camara_det_mov'
  device_class: motion
  # 0: No alarm
  # 1: Alarm triggered
  value_template: >-
          {%- if value != "0" %}
              ON
          {% else %}
              OFF
          {%- endif %}

- platform: template
  sensors:
    salon_detector_movimiento:
      value_template: "{{ is_state('sensor.fibaro_fgms001_motion_sensor_salon_burglar', '8') }}"
      device_class: motion
    salon_detector_movimiento_sabotaje:
      value_template: "{{ is_state('sensor.fibaro_fgms001_motion_sensor_salon_burglar', '3') }}"
      device_class: vibration

- platform: workday
  country: ES
  province: IBA

# Trend sensors
- platform: trend
  sensors:
    exterior_termometro_temperatura_descendiendo:
      entity_id: sensor.netatmo_exterior_temperature
      invert: true

    exterior_termometro_temperatura_aumentando:
      entity_id: sensor.netatmo_exterior_temperature

    salon_termometro_temperatura_descendiendo:
      entity_id: sensor.salon_termometro_temperatura
      invert: true
    salon_termometro_temperatura_aumentando:
      entity_id: sensor.salon_termometro_temperatura

    recibidor_termometro_temperatura_descendiendo:
      entity_id: sensor.recibidor_termometro_temperatura
      invert: true
    recibidor_termometro_temperatura_aumentando:
      entity_id: sensor.recibidor_termometro_temperatura
      
    suite_termometro_temperatura_descendiendo:
      entity_id: sensor.suite_termometro_temperatura
      invert: true
    suite_termometro_temperatura_aumentando:
      entity_id: sensor.suite_termometro_temperatura

    habitacion_termometro_temperatura_descendiendo:
      entity_id: sensor.habitacion_termometro_temperatura
      invert: true
    habitacion_termometro_temperatura_aumentando:
      entity_id: sensor.habitacion_termometro_temperatura

    salon_termometro_co2_descendiendo:
      entity_id: sensor.salon_termometro_co2
      invert: true
    salon_termometro_co2_aumentando:
      entity_id: sensor.salon_termometro_co2

    suite_termometro_co2_descendiendo:
      entity_id: sensor.suite_termometro_co2
      invert: true
    suite_termometro_co2_aumentando:
      entity_id: sensor.suite_termometro_co2

    habitacion_termometro_co2_descendiendo:
      entity_id: sensor.habitacion_termometro_co2
      invert: true
    habitacion_termometro_co2_aumentando:
      entity_id: sensor.habitacion_termometro_co2

    planta_baja_temperatura_descendiendo:
      entity_id: sensor.temperature_ground_floor
      invert: true
      max_samples: 5
    planta_baja_temperatura_aumentando:
      entity_id: sensor.temperature_ground_floor
      max_samples: 5

    primera_planta_temperatura_descendiendo:
      entity_id: sensor.temperature_first_floor
      invert: true
      max_samples: 5
    primera_planta_temperatura_aumentando:
      entity_id: sensor.temperature_first_floor
      max_samples: 5

#- platform: template
#  sensors:
#    piscina_pump:
#      friendly_name: Motor piscina
#      value_template: "{{(as_timestamp(now())|round - as_timestamp(states.sensor.piscina_on_time.state)|round) >= 0 and (as_timestamp(now())|round - as_timestamp(states.sensor.piscina_off_time.state)|round) <= 0}}"
#      device_class: plug

- platform: bayesian
  # Indicates the probability that this is true in a day – let’s say I’m home half the time, or 0.5
  prior: 0.5
  name: 'Jordi Presence'
  # How sure should it be to guess that I’m home? By setting the bar high at 90%, we are requiring more than one platform to be ‘home’ before it will flip to on.
  probability_threshold: 0.95
  observations:
    - entity_id: 'device_tracker.hokusphone_nmap'
      # If I’m home, how likely is this state true? In other words, how reliable is that platform at marking me home?
      prob_given_true: 0.75
      # How likely is this platform to be wrong – for it to be ‘home’ when I’m not home?
      prob_given_false: 0.25
      platform: 'state'
      to_state: 'home'
    - entity_id: 'device_tracker.hokusphone_wifi'
      prob_given_true: 0.9
      prob_given_false: 0.1
      platform: 'state'
      to_state: 'home'
    - entity_id: 'device_tracker.hokusphone_ibeacon'
      prob_given_true: 0.9
      prob_given_false: 0.1
      platform: 'state'
      to_state: 'home'
