  ##############################################
  # Heating intents
  ##############################################
  heating.check:
    speech:
      text: >
        {%- set status ={"on": "conectada", "off": "desconectada"} -%}
        La calefacción está {{ status[states("switch.termostato")] }}. {% if is_state("switch.termostato", "on") %}{% if states("climate.termostato") != "0"%} A una temperatura de {{ states("climate.termostato") }} grados.{% endif -%} {% if is_state_attr("climate.termostato", "operation_mode", "idle") %} No está en marcha{%- else %} Está en marcha{% endif -%}{%- if is_state("switch.termostato_modo_ausente", "on") %} y tiene el modo ausente activado.  {%- else %} y tiene el modo ausente desactivado. {% endif %}{% endif %}

  heating.temperature.change.relative:
    speech:
      text: >
        {% if is_state("switch.termostato", "on") %}¡Entendido!, voy a {{ change.direction }} la temperatura de la calefacción {{ change.degrees }} {{ unit | replace("?","") }}. Ahora está a {{ states.climate.termostato.attributes.temperature}} grados{% else %}¡Vaya!, No puedo {{ change.direction }} la calefacción porque está desconectada{% endif %}
    async_action: false
    action:
      - condition: state
        entity_id: switch.termostato
        state: 'on'
      - service: climate.set_temperature
        data_template:
          entity_id: climate.termostato
          temperature: >
            {%- if change.direction == 'subir'-%}
              {{ states.climate.termostato.attributes.temperature + change.degrees | float }}
            {%- else -%}
              {{ states.climate.termostato.attributes.temperature - change.degrees | float }}
            {%- endif -%}

  heating.temperature.change.absolute:
    speech:
      text: >
        {% if is_state("switch.termostato", "on") %}¡Perfecto! He cambiado la temperatura de la calefacción a {{ change.degrees }} grados. {% else %}¡Vaya!, No puedo {{ change.set }} la calefacción porque está desconectada{% endif %}
    async_action: false
    action:
      - condition: state
        entity_id: switch.termostato
        state: 'on'
      - service: climate.set_temperature
        data_template:
          entity_id: climate.termostato
          temperature: '{{ change.degrees }}'

  heating.temperature.change.restore:
    speech:
      text: >
        {% if is_state("switch.termostato", "on") %}¡Perfecto! Estoy restaurando la programación normal en la calefaccción. {% else %}¡Vaya!, la calefacción está desconectada{% endif %}
    async_action: false
    action:
      - condition: state
        entity_id: switch.termostato
        state: 'on'
      - service_template: 'switch.turn_on'
        data_template:
          entity_id: 'switch.termostato_modo_ausente'
      - delay:
          seconds: 2
      - service_template: 'switch.turn_off'
        data_template:
          entity_id: 'switch.termostato_modo_ausente'

  ##############################################
  # Fence intents
  ##############################################
  fence.check:
    speech:
      text: >
        {%- set status ={"Abierta": "cerrarla", "Cerrada": "abrirla"} -%}
        La barrera está {{states("sensor.switch_barrera")}}. ¿Quieres {{ status[states("sensor.switch_barrera")] }}?

  ##############################################
  # Climate intents
  ##############################################
  climate.check:
    speech:
      text: >
        {% set locationPre,locationSensor = location.split(" ") %}
        {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_temperatura") != "unknown" -%}
          La temperatura en {{ location }} es de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_temperatura") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_temperatura"].attributes.unit_of_measurement }} 
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_humedad") != "unknown" %} con una humedad del {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_humedad") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_humedad"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_max_temp") != "unknown" %} La temperatura máxima de hoy ha sido de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_max_temp") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_max_temp"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_min_temp") != "unknown" %} La temperatura mínima de hoy ha sido de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_min_temp") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_min_temp"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_co2") != "unknown" %} El nivel de C O 2 es de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_co2") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_co2"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_ruido") != "unknown" %} El nivel de ruido es de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_ruido") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_ruido"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_presion") != "unknown" %} La presión atmosférica es de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_presion") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_presion"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_anemometro_velocidad_viento") != "unknown" %} Las rachas de viento son de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_anemometro_velocidad_viento") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_anemometro_velocidad_viento"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia") != "unknown" %}{%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia") == "0" %} No está lloviendo.{% else %} Está lloviendo unos {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_pluviometro_lluvia"].attributes.unit_of_measurement }}.{% endif %}{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_1") != "unknown" %}{%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_1") == "0" %} No ha llovido durante la última hora.{% else %} La precipitación de la última hora ha sido de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_1") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_1"].attributes.unit_of_measurement }}.{% endif %}{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_24") != "unknown" %}{%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_24") == "0" %} No ha llovido durante las últimas 24 horas.{% else %} La precipitación de las últimas 24 horas ha sido de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_24") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_24"].attributes.unit_of_measurement }}.{% endif %}{% endif %}
        {%- else -%}
          ¡Vaya! No tengo ningún sensor de temperatura en {{ location }}.
        {% endif %}

  ##############################################
  # Generic intents
  ##############################################
  device.turnOnOff:
    speech:
      text: >
        {% if (states.sensor["on_off_" ~ device | replace(".","_")] is not none) %}
          {% if targetState and (targetState == "on" or targetState == "off") %}
            {% if not is_state(device, targetState) %}
              He {{ states.sensor["on_off_" ~ device | replace(".","_")].state }} {{ states.sensor["on_off_" ~ device | replace(".","_")].attributes.friendly_name }}
            {% else %}
              Ya estaba {{ states.sensor["check_" ~ device | replace(".","_")].state }}. No he hecho nada.
            {% endif %}
          {% else %}
            He {{ states.sensor["on_off_" ~ device | replace(".","_")].state }} {{ states.sensor["on_off_" ~ device | replace(".","_")].attributes.friendly_name }}
          {% endif %}
        {% else %}
          ¡Vaya!. No puedo hacerlo.
        {% endif %}
    async_action: false
    action:
      - delay:
          milliseconds: 500
      - service_template: >
          {% if (states.sensor["on_off_" ~ device | replace(".","_")] is not none) %}
            {% if targetState and (targetState == "on" or targetState == "off") %}
              {% if not is_state(device | replace(".","_"), targetState) %}
                homeassistant.turn_{{targetState}}
              {% endif %}
            {% else %}
              homeassistant.toggle
            {% endif %}
          {% endif %}
  
        data_template:
          entity_id: '{{device}}'

  device.check:
    speech:
      text: >
        {%- set data ={"on-off": {"encendido": "apagarlo", "apagado": "encenderlo"},
                       "on-off-f": {"encendida": "apagarla", "apagada": "encenderla"},
                       "on-off-fp": {"encendidas": "apagarlas", "apagadas": "encenderlas"},
                       "open-close": {"abierta": "cerrarla", "cerrada": "abrirla"},
                       "connected-disconnected": {"conectado": "desconectarlo", "desconectado": "conectarlo"},
                       "enabled-disabled": {"activado": "desactivarlo", "desactivado": "activarlo"},
                       "none": "void"
                       } -%}
        {%- set targetState = data[states.sensor["check_" ~ device | replace(".","_")].attributes.unit_of_measurement] -%}
        {{ states.sensor["check_" ~ device | replace(".","_")].attributes.friendly_name }} está {{ states.sensor["check_" ~ device | replace(".","_")].state }}.
        {% if targetState != "void" %}
          ¿Quieres {{ targetState[states.sensor["check_" ~ device | replace(".","_")].state] }}?
        {% endif %}

  ##############################################
  # Various intents
  ##############################################
  authorized.person:
    speech:
      text: >
        {%- set timestamp = strptime(time, '%H:%M:%S')-%}
        {%- set targetTime = now().replace(hour=timestamp.hour).replace(minute=timestamp.minute).replace(second=timestamp.second)-%}
        {%- set minutes = (((as_timestamp(targetTime) - as_timestamp(now())) | int) / 60) | round | int -%}
        {%- if minutes > 0 -%}
          Activada persona autorizada durante {{ minutes }} minutos
        {%- else -%}
          No puedo activar una persona autorizada en el pasado.
        {%- endif -%}
    async_action: false
    action:
      - service_template: >
          {%- set timestamp = strptime(time, '%H:%M:%S')-%}
          {%- set targetTime = now().replace(hour=timestamp.hour).replace(minute=timestamp.minute).replace(second=timestamp.second)-%}
          {%- set minutes = (((as_timestamp(targetTime) - as_timestamp(now())) | int) / 60) | round | int -%}
          {%- if minutes > 0 -%}
            input_number.set_value
          {%- endif -%}

        data_template:
         entity_id: input_number.empty_home_activation_delay_minutes
         value: >
          {%- set timestamp = strptime(time, '%H:%M:%S')-%}
          {%- set targetTime = now().replace(hour=timestamp.hour).replace(minute=timestamp.minute).replace(second=timestamp.second)-%}
          {%- set minutes = (((as_timestamp(targetTime) - as_timestamp(now())) | int) / 60) | round -%}
          {%- if minutes > 0 -%}
            {{ minutes }}
          {%- endif -%}
      - service_template: >
          {%- set timestamp = strptime(time, '%H:%M:%S')-%}
          {%- set targetTime = now().replace(hour=timestamp.hour).replace(minute=timestamp.minute).replace(second=timestamp.second)-%}
          {%- set minutes = (((as_timestamp(targetTime) - as_timestamp(now())) | int) / 60) | round | int -%}
          {%- if minutes > 0 -%}
            homeassistant.turn_on
          {%- endif -%}

        data:
          entity_id: input_boolean.empty_home_activation_delay

  shift.geni.check:
    speech:
      text: >
       {%- if is_state("sensor.next_shift_event", "Saliente") -%}
         {{name_original}} está hoy saliente de noche
       {%- else -%}
         {% set diff = as_timestamp(states.calendar.turnos_geni_everything.attributes.start_time) - as_timestamp(now().replace(hour=0).replace(minute=0).replace(second=0).replace(microsecond=0)) %}
         {%- if diff < 86400 -%}
           {{name_original}} trabaja hoy por la {{ states("sensor.next_shift_event") }}
         {%- elif diff >= 86400 and diff < 86400*2 -%}
           {{name_original}} trabaja mañana por la {{ states("sensor.next_shift_event") }}
         {%- else -%}
           {{name_original}} trabaja el próximo {{ states("sensor.next_shift_date") }} por la {{ states("sensor.next_shift_event") }}
         {% endif %}
       {% endif %}

  presence.geni.check:
    speech:
      text: >
        {%- if is_state("device_tracker.geni_combined", "home") -%}
          Parece que {{name_original}} está en casa.
        {%- else -%}
          Pues parece que {{name_original}} no está en casa.
        {%- endif -%}

  goodnight.check:
    speech:
      text: >
        {%- if is_state("sensor.cocina_sensor_puerta", "Abierta") %}Puerta de la cocina abierta. {% endif -%}{%- if is_state("sensor.cocina_sensor_persiana", "Abierta") %}Persiana de la cocina abierta. {% endif -%}{% if is_state("sensor.switch_barrera", "Abierta") %}Te has dejado la barrera abierta, la voy a cerrar. {% endif -%}Buenas noches.
    async_action: true
    action:
      # Only execute between 21:00 and 6:00
      - condition: time
        after: '21:00'
        before: '6:00'
      # Turn off stairs lights
      - service: switch.turn_on
        data:
          entity_id: switch.fibaro_fgs223_double_relay_luz_escalera_y_suite_switch
      # Turn off outside lights
      - service: light.turn_off
        data:
          entity_id: group.luces_exteriores
      # Turn off hall lamp
      - service: switch.turn_off
        data:
          entity_id: switch.swiid_swiidinter_lampara_recibidor_switch
      # Close fence if open
      - service_template: >
          {%- if is_state("sensor.switch_barrera", "Abierta") -%}
            homeassistant.turn_on
          {%- endif -%}

        data:
          entity_id: switch.barrera
      # Wait 1 minute before turning off stair lights
      - delay:
          minutes: 1
      # Turn off stairs lights
      - service: switch.turn_off
        data:
          entity_id: switch.fibaro_fgs223_double_relay_luz_escalera_y_suite_switch