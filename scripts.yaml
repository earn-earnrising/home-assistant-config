restart_ha:
  alias: 'Reiniciar HA'
  sequence:
      - service: homeassistant.restart

reboot_pi:
  alias: 'Reiniciar Pi'
  sequence:
      - service: shell_command.reboot_pi

power_off_thermostat:
  alias: 'Power off thermostat'
  sequence:
    - service: climate.set_temperature
      entity_id: climate.termostato
      data:
        temperature: 11.5

power_on_thermostat:
  alias: 'Power on thermostat'
  sequence:
    - service: climate.set_away_mode
      entity_id: climate.termostato
      data:
        away_mode: false

empty_home:
  alias: 'Empty home'
  sequence:
    # Turn on presence detection
    - service: homeassistant.turn_on
      data:
        entity_id: group.seguridad
    # Turn off hall lamp
    - service: switch.turn_off
      data:
        entity_id: switch.swiid_swiidinter_switch_3_0
    # Turn off stair lights
    - service: switch.turn_off
      data:
        entity_id: switch.fibaro_system_fgs223_double_relay_switch_7_0
    # Turn off suite light
    - service: switch.turn_off
      data:
        entity_id: switch.fibaro_system_fgs223_double_relay_switch_7_0_2
    # Continue script only if switch.termostato is on and not in holiday mode
    - condition: state
      entity_id: switch.termostato
      state: 'on'
    - condition: state
      entity_id: switch.holiday
      state: 'off'
   # Turn on thermostat away mode 
    - service: climate.set_away_mode
      entity_id: climate.termostato
      data:
        away_mode: true

someone_home:
  alias: 'Someone at home'
  sequence:
    # Turn off presence detection
    - service: homeassistant.turn_off
      data:
        entity_id: group.seguridad
    # Continue script only if switch.termostato is on and not in holiday mode
    - condition: state
      entity_id: switch.termostato
      state: 'on'
    - condition: state
      entity_id: switch.holiday
      state: 'off'
   # Turn off thermostat away mode 
    - service: climate.set_away_mode
      entity_id: climate.termostato
      data:
        away_mode: false

set_virtual_device_home:
  alias: 'Set virtual device at home for 180 minutes'
  sequence:
    - service: input_slider.select_value
      data:
        entity_id: input_slider.empty_home_activation_delay_minutes
        value: 180.0
    - service: homeassistant.turn_on
      data:
        entity_id: input_boolean.empty_home_activation_delay

leave_home:
  alias: 'Leave home'
  sequence:
    - service: tts.google_say
      entity_id: media_player.homeassistant
      data_template:
        message: >
          {% set incidence = false %}
          {%- if is_state("sensor.cocina_sensor_puerta", "Abierta") %}{% set incidence = true %}Puerta de la cocina abierta. {% endif %}
          {%- if is_state("switch.swiid_swiidinter_switch_3_0", "on") %}{% set incidence = true %}Lámpara del recibidor encendida. {% endif %}
          {%- if is_state("switch.fibaro_system_fgs223_double_relay_switch_7_0", "on") %}{% set incidence = true %}Luz de la escalera encendida. {% endif %}
          {%- if is_state("switch.fibaro_system_fgs223_double_relay_switch_7_0_2", "on") %}{% set incidence = true %}Luz de la suite encendida. {% endif %}
          {%- if is_state("sensor.switch_barrera", "Abierta") %}{% set incidence = true %}Barrera abierta.{% endif -%}
          {%- if not incidence %}Todo correcto.{% endif %}

goto_sleep:
  alias: 'Go to sleep'
  sequence:
    # Only execute script between 21:00 and 6:00
    - condition: time
      after: '21:00'
      before: '6:00'
    # Turn on stairs lights
    - service: switch.turn_on
      data:
        entity_id: switch.fibaro_system_fgs223_double_relay_switch_7_0
    # Close fence if open
    - service_template: >
        {%- if is_state("sensor.switch_barrera", "Abierta") -%}
          homeassistant.turn_on
        {%- endif -%}

      data:
        entity_id: switch.barrera
    # Turn off outside lights
    - service: light.turn_off
      data:
        entity_id: group.luces_exteriores
    # Turn off hall lamp
    - service: switch.turn_off
      data:
        entity_id: switch.swiid_swiidinter_switch_3_0
    # Speech the found incidences and say good night.
    - service: tts.google_say
      entity_id: media_player.homeassistant
      data_template:
        message: >
          {%- if is_state("sensor.cocina_sensor_puerta", "Abierta") %}Puerta de la cocina abierta. {% endif %}
          {%- if is_state("sensor.switch_barrera", "Abierta") -%}Cerrando barrera.{% endif -%}
          Buenas noches
    # Wait until tts finishes
#    - delay: '00:00:{{ states.media_player.homeassistant.attributes.media_duration | int }}'
    # Wait 1 minute before turning stair lights off
    - delay:
        minutes: 1
    # Turn stairs lights off
    - service: switch.turn_off
      data:
        entity_id: switch.fibaro_system_fgs223_double_relay_switch_7_0

parte_meteorologico:
  alias: 'Parte meteorológico'
  sequence:
    - service: tts.google_say
      entity_id: media_player.homeassistant
      data_template:
        message: >
          La temperatura exterior es de {{ states("sensor.exterior_termometro_temperatura") | replace("."," con ") }} {{states.sensor["exterior_termometro_temperatura"].attributes.unit_of_measurement }} 
          y una humedad del {{ states("sensor.exterior_termometro_humedad") }} {{states.sensor["exterior_termometro_humedad"].attributes.unit_of_measurement }}.
          La temperatura máxima de hoy ha sido de {{ states("sensor.exterior_termometro_max_temp") | replace("."," con ") }} {{states.sensor["exterior_termometro_max_temp"].attributes.unit_of_measurement }}.
          La temperatura mínima de hoy ha sido de {{ states("sensor.exterior_termometro_min_temp") | replace("."," con ") }} {{states.sensor["exterior_termometro_min_temp"].attributes.unit_of_measurement }}.
          La presión atmosférica es de {{ states("sensor.salon_termometro_presion") | replace("."," con ") }} {{states.sensor["salon_termometro_presion"].attributes.unit_of_measurement }}.
          Las rachas de viento son de {{ states("sensor.exterior_anemometro_velocidad_viento") }} {{states.sensor["exterior_anemometro_velocidad_viento"].attributes.unit_of_measurement }}'
          {%- if states("sensor.exterior_pluviometro_lluvia") == "0" %} No está lloviendo.{% else %} Está lloviendo unos {{ states("sensor.exterior_pluviometro_lluvia") | replace("."," con ") }} {{states.sensor["exterior_pluviometro_lluvia"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor.exterior_pluviometro_lluvia_1") == "0" %} No ha llovido durante la última hora.{% else %} La precipitación de la última hora ha sido de {{ states("sensor.exterior_pluviometro_lluvia_1") | replace("."," con ") }} {{states.sensor["exterior_pluviometro_lluvia_1"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor.exterior_pluviometro_lluvia_24") == "0" %} No ha llovido durante las últimas 24 horas.{% else %} La precipitación de las últimas 24 horas ha sido de {{ states("sensor.exterior_pluviometro_lluvia_24") | replace("."," con ") }} {{states.sensor["exterior_pluviometro_lluvia_24"].attributes.unit_of_measurement }}.{% endif %}
        cache: false

refresh_location:
  alias: 'Refresh location'
  sequence:
    - service: mqtt.publish
      data:
        topic: 'owntracks/hokusphone/hokusphone/cmd'
        payload_template: '{"_type":"cmd","action":"reportLocation"}'

notify_motion_detection:
  alias: 'Notifies motion detection'
  sequence:
      # Only send notification if the alarm has not fired recently (state is off).
    - condition: template
      value_template: '{{ states("binary_sensor." ~ data.camera ~ "_camara_deteccion_movimiento") == "off" }}'
      # Call script motion_detected_mqtt passing as variable the camera name
    - service: script.motion_detected_mqtt
      data_template:
        camera: '{{data.camera}}'
      # Send the notification
    - service: notify.telegram
      data_template:
        message: 'text'
        data:
          photo:
            file: '{{data.file}}'
            caption: 'Movimiento detectado en {{data.camera}}'

motion_detected_mqtt:
  alias: 'Set motion detected mqtt'
  sequence:
    - delay:
        seconds: 10
    - service: mqtt.publish
      data_template:
        topic: 'home/camera/{{camera}}/alarm'
        payload: '1'
