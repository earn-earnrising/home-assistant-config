#############################################################
# Presence automations
#############################################################

# Empty home automation when no one of the Familia group is at home
- alias: 'Empty home'
  trigger:
    platform: state
    entity_id: group.unidad_familiar
    to: 'not_home'
  action:
    - service: script.turn_on
      data:
        entity_id: script.empty_home

# Someone home automation when someone of the Familia group is at home
- alias: 'Someone home'
  trigger:
    platform: state
    entity_id: group.unidad_familiar
    to: 'home'
  action:
    - service: script.turn_on
      data:
        entity_id: script.someone_home

# Turn on hall lamp when someone at home and the sun is set
- alias: 'Turn on hall lamp when someone at home and the sun is set'
  trigger:
    platform: state
    entity_id: group.unidad_familiar
    to: 'home'
  condition:
    condition: sun
    after: sunset
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.swiid_swiidinter_lampara_recibidor_switch

# When input_boolean.empty_home_activation_delay turns on,
# Change virtual_device location to home
# Wait the specified amount of minutes 
# Turn off input_boolean.empty_home_activation_delay
- alias: 'empty_home_activation_delay on'
  trigger:
    platform: state
    entity_id: input_boolean.empty_home_activation_delay
    to: 'on'
  action:
    - service: device_tracker.see
      data:
        dev_id: 'virtual_device'
        location_name: 'home'
    - service: notify.telegram
      data_template:
        message: >
          Activada persona autorizada durante {{ (states.input_number.empty_home_activation_delay_minutes.state | int) // 60 }} hora(s) y {{ (states.input_number.empty_home_activation_delay_minutes.state | int) % 60 }} minutos
    - delay: '{{ (states.input_number.empty_home_activation_delay_minutes.state | int) // 60 }}:{{ (states.input_number.empty_home_activation_delay_minutes.state | int) % 60 }}'
    - service: homeassistant.turn_off
      data:
        entity_id: input_boolean.empty_home_activation_delay

# When input_boolean.empty_home_activation_delay turns off,
# Change virtual_device location to not_home
- alias: 'empty_home_activation_delay off'
  trigger:
    platform: state
    entity_id: input_boolean.empty_home_activation_delay
    to: 'off'
  action:
    - service: device_tracker.see
      data:
        dev_id: 'virtual_device'
        location_name: 'not_home'

# Turn on for 4 hours authorized person at 7:00 if it's a workday and the shift in calendar is "Mañana" or "Saliente"
- alias: 'Authorized person'
  trigger:
    platform: time
    at: '07:00:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: 'binary_sensor.workday_sensor'
        state: 'on'
      - condition: or
        conditions:
        - condition: state
          entity_id: 'calendar.turnos_geni_manyana'
          state: 'on'
        - condition: state
          entity_id: 'calendar.turnos_geni_saliente'
          state: 'on'
  action:
    - service: input_number.set_value
      data:
        entity_id: input_number.empty_home_activation_delay_minutes
        value: 240.0
    - service: homeassistant.turn_on
      data:
        entity_id: input_boolean.empty_home_activation_delay

#############################################################
# Presence automations - Geni
#############################################################

# When some related entities (device_tracker.geniphone, device_tracker.geniphone_wifi, device_tracker.geniphone_ibeacon, sensor.geni_keyfob) changes its state:
# Set Geni to 'En ruta' if ibeacon is not 'home' and don't have the 'not_detected' value.
# Else set Geni to 'home' when at least ONE of related entities are set to 'home'
# Else set Geni to 'not_home' when ALL related entities are in a state different from 'home' and not 'En ruta'
# Set Geni to the WiFi name otherwise
- alias: 'Geni location'
  trigger:
    - platform: state
      entity_id: device_tracker.geniphone, device_tracker.geniphone_wifi, device_tracker.geniphone_ibeacon, sensor.geni_keyfob
    - platform: homeassistant
      event: start
  action:
    - service: device_tracker.see
      data_template:
        dev_id: 'geni_combined'
        location_name: >
          {%- if not(is_state('device_tracker.geniphone_ibeacon', 'home')) and not(is_state('device_tracker.geniphone_ibeacon', 'not_detected'))-%}
            {{ states.device_tracker.geniphone_ibeacon.state }}
          {%- else -%}
            {%- if is_state('device_tracker.geniphone', 'home') or is_state('device_tracker.geniphone_wifi', 'home') or is_state('device_tracker.geniphone_ibeacon', 'home') or is_state('sensor.geni_keyfob', 'home')-%}
              home
            {%- else -%}
              {%- if is_state('device_tracker.geniphone', 'not_home') and is_state('device_tracker.geniphone_wifi', 'not_connected') and is_state('device_tracker.geniphone_ibeacon', 'not_detected') and is_state('sensor.geni_keyfob', 'not_home')-%}
                not_home
              {%- else -%}
                {{ states.device_tracker.geniphone_wifi.state }}
              {%- endif -%}
            {%- endif -%}
          {%- endif -%}

# If fence is closed, Nissan enter 'home' zone and Geni is 'En Ruta'
# Open fence, notify it and set Geni as 'home'
- alias: 'Geni arriving home'
  trigger:
     - platform: zone
       entity_id: device_tracker.nissan
       zone: zone.home
       event: enter
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.switch_barrera
        state: 'Cerrada'
      - condition: state
        entity_id: device_tracker.geni_combined
        state: 'En ruta'
  action:
    - service: switch.turn_on
      entity_id: switch.barrera
      data_template:
        message: 'Barrera abierta automáticamente para Geni'
        inline_keyboard: 
          - 'Cerrar:/script.turn_on#script.close_fence'
    - delay:
        seconds: 5
    - service: device_tracker.see
      data:
        dev_id: 'geni_combined'
        location_name: 'home'

#############################################################
# Presence automations - Jordi
#############################################################

# When some related entities (device_tracker.hokusphone, device_tracker.hokusphone_wifi, device_tracker.hokusphone_ibeacon, sensor.hokus_keyfob) changes its state:
# Set Jordi to 'En ruta' if ibeacon is not 'home' and don't have the 'not_detected' value.
# Else set Jordi to 'home' when at least ONE of related entities are set to 'home'
# Else set Jordi to 'not_home' when ALL related entities are in a state different from 'home' and not 'En ruta'
# Set Jordi to the WiFi name otherwise
- alias: 'Jordi location'
  trigger:
    - platform: state
      entity_id: device_tracker.hokusphone, device_tracker.hokusphone_wifi, device_tracker.hokusphone_ibeacon, sensor.hokus_keyfob
    - platform: homeassistant
      event: start
  action:
    - service: device_tracker.see
      data_template:
        dev_id: 'jordi_combined'
        location_name: >
          {%- if not(is_state('device_tracker.hokusphone_ibeacon', 'home')) and not(is_state('device_tracker.hokusphone_ibeacon', 'not_detected'))-%}
            {{ states.device_tracker.hokusphone_ibeacon.state }}
          {%- else -%}
            {%- if is_state('device_tracker.hokusphone', 'home') or is_state('device_tracker.hokusphone_wifi', 'home') or is_state('device_tracker.hokusphone_ibeacon', 'home') or is_state('sensor.hokus_keyfob', 'home')-%}
              home
            {%- else -%}
              {%- if is_state('device_tracker.hokusphone', 'not_home') and is_state('device_tracker.hokusphone_wifi', 'not_connected') and is_state('device_tracker.hokusphone_ibeacon', 'not_detected')  and is_state('sensor.hokus_keyfob', 'not_home')-%}
                not_home
              {%- else -%}
                {{ states.device_tracker.hokusphone_wifi.state }}
              {%- endif -%}
            {%- endif -%}
          {%- endif -%}

# If fence is closed, Toyota enter 'home' zone and Jordi is 'En Ruta'
# Open fence, notify it, send a meessage to mqtt topic, and set Jordi as 'home'
- alias: 'Jordi arriving home'
  trigger:
     - platform: zone
       entity_id: device_tracker.toyota
       zone: zone.home
       event: enter
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.switch_barrera
        state: 'Cerrada'
      - condition: state
        entity_id: device_tracker.jordi_combined
        state: 'En ruta'
  action:
    - service: switch.turn_on
      entity_id: switch.barrera
    - service: mqtt.publish
      data:
        payload_template: >
          He abierto la barrera. {%- if is_state("device_tracker.geni_combined", "home") -%}Jeni está en casa. {%- else -%}Es posible que Jeni no esté en casa.{%- endif -%}
        retain: false
        topic: 'device/carphone/say'
    - delay:
        seconds: 5
    - service: telegram_bot.send_message
      data_template:
        message: 'Barrera abierta automáticamente'
        target: !secret hokusphone_telegram_chat_id
        inline_keyboard: 
          - 'Cerrar:/script.turn_on#script.close_fence'
    - service: device_tracker.see
      data:
        dev_id: 'jordi_combined'
        location_name: 'home'

# When Jordi leave home zone and in the car:
#   - Set hokusphone 'not_home'
#   - If nobody at home, close the fence if open, and notify if porch door or blind is open.
- alias: 'Jordi leaving home with car'
  trigger:
     - platform: zone
       entity_id: device_tracker.toyota
       zone: zone.home
       event: leave
  condition:
    - condition: state
      entity_id: device_tracker.jordi_combined
      state: 'En ruta'
  action:
    - service: device_tracker.see
      data:
        dev_id: 'hokusphone'
        location_name: 'not_home'
    - service: mqtt.publish
      data:
        payload_template: >
          {%- if is_state("group.unidad_familiar", "not_home") -%}{%- if is_state("sensor.switch_barrera", "Abierta") -%}Te has dejado la barrera abierta, la voy a cerrar. {%- endif -%}{%- if is_state("sensor.cocina_sensor_puerta", "Abierta") %}Puerta de la cocina abierta. {% endif -%}{%- if is_state("sensor.cocina_sensor_persiana", "Abierta") %}Persiana de la cocina abierta. {% endif -%}{%- endif -%}La previsión del tiempo es de {{ states.sensor.pws_weather_1d_metric.state | replace(" C."," grados") }}
        retain: false
        topic: 'device/carphone/say'
    - service_template: >
        {%- if is_state("group.unidad_familiar", "not_home") -%}
          {%- if is_state("sensor.switch_barrera", "Abierta") -%}
            homeassistant.turn_on
          {%- endif -%}
        {%- endif -%}

      data:
        entity_id: switch.barrera

#############################################################
# Heating automations
#############################################################

# When the switch.termostato changes to on
- alias: 'Heating on'
  trigger:
    platform: state
    entity_id: switch.termostato
    to: 'on'
  action:
    # Turn on thermostat
    - service: script.turn_on
      entity_id: script.power_on_thermostat

# When the switch.termostato changes to off
- alias: 'Heating off'
  trigger:
    platform: state
    entity_id: switch.termostato
    to: 'off'
  action:
    # Turn off thermostat
    - service: script.turn_on
      entity_id: script.power_off_thermostat

# When average temp on ground floor or first floor is under target climate temperature
# If:
#  - There is someone at home
#  - Heating is connected
#  - Heating is idle
#  - Temperature trend in ground floor or first floor is going down
# Then turn on temperature by setting target temperature to 23 degrees
- alias: 'Heating comfort'
  trigger:
    platform: state
    entity_id: binary_sensor.comfort_state
    to: 'on'
  condition:
    - condition: time
      after: '16:00'
  action:
  - service: telegram_bot.send_message
    data_template:
      message: > 
        Calefacción encendida para mejorar el confort
        
        Temperatura objetivo: {{ states.climate.termostato.attributes.temperature }}
        
        Temperatura media planta baja: {{states.sensor.temperature_ground_floor.state}}
        
        Temperatura media primera planta: {{states.sensor.temperature_first_floor.state}}
        
        Ocupación: {{states.group.unidad_familiar.state}}
        
        Estado calefacción: {{states.switch.termostato.state}}
        
        Modo ausente: {{states.switch.termostato_modo_ausente.state}}
        
        Estado termostato: {{states.climate.termostato.attributes.operation_mode}}
        
        Tendencia temperatura planta baja: {{states.sensor.planta_baja_temperatura_tendencia.state}}
        
        Tendencia temperatura primera planta: {{states.sensor.primera_planta_temperatura_tendencia.state}}

      inline_keyboard: 
        - 'Desconectar:/script.turn_on#script.comfort_mode_off'

  - delay:
      seconds: 30
  - service: climate.set_temperature
    data_template:
      entity_id: climate.termostato
      temperature: 23

#############################################################
# Holiday automations
#############################################################

# Enters on holiday mode based on google calendar event
- alias: 'Calendar holiday mode'
  trigger:
    platform: state
    entity_id: calendar.holiday_mode
    from: 'off'
    to: 'on'
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.holiday

# Exits on holiday mode based on google calendar event
- alias: 'Calendar holiday mode exit'
  trigger:
    platform: state
    entity_id: calendar.holiday_mode
    from: 'on'
    to: 'off'
  action:
    - service: switch.turn_off
      data:
        entity_id: switch.holiday

# Enters holiday mode based on switch
- alias: 'Switch holiday mode'
  trigger:
    platform: state
    entity_id: switch.holiday
    from: 'off'
    to: 'on'
  condition:
    condition: state
    entity_id: switch.termostato
    state: 'on'
  action:
    # Turn off thermostat
    - service: script.turn_on
      entity_id: script.power_off_thermostat
    - service: notify.telegram
      data:
        message: 'Modo vacaciones activado'

# Exits holiday mode based on switch
- alias: 'Exit holiday mode'
  trigger:
    platform: state
    entity_id: switch.holiday
    from: 'on'
    to: 'off'
  condition:
    condition: state
    entity_id: switch.termostato
    state: 'on'
  action:
    # Turn on thermostat an set it to away mode
    - service: climate.set_away_mode
      entity_id: climate.termostato
      data:
        away_mode: true
    - service: notify.telegram
      data:
        message: 'Modo vacaciones desactivado'

#############################################################
# Alarm automations
#############################################################

# Trigger alarm when armed away
- alias: 'Trigger alarm armed away'
  trigger:
    # When any camera publishes an image to the FTP
    - platform: event
      event_type: folder_watcher
      event_data:
        event_type: created
    # When Netatmo camera detects human presence
    - platform: state
      entity_id: binary_sensor.entrada_principal_outdoor_human
      to: 'on'
    # When Kitchen blind is open
    - platform: state
      entity_id: binary_sensor.fibaro_fgk10x_door_opening_sensor_persiana_porche
      to: 'on'
    # When Outside kitched door is open
    - platform: state
      entity_id: binary_sensor.fibaro_fgk10x_door_opening_sensor_puerta_porche
      to: 'on'
    # When Laundry door is open
    - platform: state
      entity_id: binary_sensor.fibaro_fgk10x_door_opening_sensor_puerta_coladuria
      to: 'on'
    # When Living room motion is detected
    - platform: state
      entity_id: binary_sensor.fibaro_fgms001_motion_sensor_salon
      to: 'on'
  condition:
    - condition: state
      entity_id: alarm_control_panel.casa
      state: armed_away
  action:
    service: alarm_control_panel.alarm_trigger
    entity_id: alarm_control_panel.casa

# Trigger alarm when armed home / armed night
- alias: 'Trigger alarm armed home'
  trigger:
    # When Kitchen blind is open
    - platform: state
      entity_id: binary_sensor.fibaro_fgk10x_door_opening_sensor_persiana_porche
      to: 'on'
    # When Outside kitched door is open
    - platform: state
      entity_id: binary_sensor.fibaro_fgk10x_door_opening_sensor_puerta_porche
      to: 'on'
    # When Laundry door is open
    - platform: state
      entity_id: binary_sensor.fibaro_fgk10x_door_opening_sensor_puerta_coladuria
      to: 'on'
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: alarm_control_panel.casa
        state: armed_home
      - condition: state
        entity_id: alarm_control_panel.casa
        state: armed_night
  action:
    service: alarm_control_panel.alarm_trigger
    entity_id: alarm_control_panel.casa

# Disarm alarm at 7:00 AM when armed night and someone is at home
- alias: 'Disarm alarm armed night'
  trigger:
    platform: time
    at: '07:00:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: 'group.unidad_familiar'
        state: 'home'
      - condition: state
        entity_id: alarm_control_panel.casa
        state: armed_night
  action:
    service: alarm_control_panel.alarm_disarm
    entity_id: alarm_control_panel.casa

# Notify presence detection in any activated sensor when sensor active and alarm triggered
- alias: 'Notify presence detection in any activated sensor when sensor active and alarm triggered'
  trigger: 
    - platform: state
      entity_id: binary_sensor.entrada_principal_outdoor_human
      from: 'off'
      to: 'on'
    - platform: state
      entity_id: binary_sensor.entrada_principal_outdoor_motion
      from: 'off'
      to: 'on'
    - platform: state
      entity_id: binary_sensor.fibaro_fgk10x_door_opening_sensor_puerta_porche
      from: 'off'
      to: 'on'
    - platform: state
      entity_id: binary_sensor.fibaro_fgk10x_door_opening_sensor_persiana_porche
      from: 'off'
      to: 'on'
    - platform: state
      entity_id: binary_sensor.fibaro_fgk10x_door_opening_sensor_puerta_coladuria
      from: 'off'
      to: 'on'
    - platform: state
      entity_id: binary_sensor.fibaro_fgms001_motion_sensor_salon
      to: 'on'
  condition:
    condition: and
    conditions:
    - condition: template
      value_template: >- 
            {%- set inputBooleanMap ={"binary_sensor.entrada_principal_outdoor_human": "input_boolean.entrada_principal_detector_movimiento",
                             "binary_sensor.entrada_principal_outdoor_motion": "input_boolean.entrada_principal_detector_movimiento",
                             "binary_sensor.fibaro_fgk10x_door_opening_sensor_puerta_porche": "input_boolean.cocina_sensor_puerta",
                             "binary_sensor.fibaro_fgk10x_door_opening_sensor_persiana_porche": "input_boolean.cocina_sensor_persiana",
                             "binary_sensor.fibaro_fgk10x_door_opening_sensor_puerta_coladuria": "input_boolean.coladuria_sensor_puerta",
                             "binary_sensor.fibaro_fgms001_motion_sensor_salon": "input_boolean.salon_detector_movimiento"}
             -%}
             {{is_state(inputBooleanMap[trigger.entity_id],'on')}}
    - condition: state
      entity_id: alarm_control_panel.casa
      state: 'triggered'
  action:
    service: telegram_bot.send_message
    data_template:
      message: >- 
            {%- set messageMap ={"binary_sensor.entrada_principal_outdoor_human": "Movimiento detectado en la entrada principal",
                             "binary_sensor.entrada_principal_outdoor_motion": "Movimiento detectado en la entrada principal",
                             "binary_sensor.fibaro_fgk10x_door_opening_sensor_puerta_porche": "Puerta de la cocina abierta",
                             "binary_sensor.fibaro_fgk10x_door_opening_sensor_persiana_porche": "Persiana de la cocina abierta",
                             "binary_sensor.fibaro_fgk10x_door_opening_sensor_puerta_coladuria": "Puerta de la coladuría abierta",
                             "binary_sensor.fibaro_fgms001_motion_sensor_salon": "Movimiento detectado en el salón"}
             -%}
            {{messageMap[trigger.entity_id]}}
      target: 
        - !secret hokusphone_telegram_chat_id
        - !secret geniphone_telegram_chat_id
      inline_keyboard: 
        - 'Desarmar 30 mins:/30_mins, Desarmar 60 mins:/60_mins'
        - 'Desarmar 120 mins:/120_mins, Desarmar 180 mins:/180_mins'
        - 'Desarmar alarma:/alarm_control_panel.alarm_disarm#alarm_control_panel.casa'

# Notify camera motion detection including attached image
- alias: 'Notify camera motion detection when alarm triggered'
  trigger:
    platform: event
    event_type: folder_watcher
    event_data:
      event_type: created
  condition:
    - condition: state
      entity_id: alarm_control_panel.casa
      state: 'triggered'
  action:
    # Delay to allow the file to be totally written in the FTP before sending it
    - delay:
        seconds: 2
    # Noitify the pictures taken
    - service: script.notify_motion_detection
      data_template:
        data:
          file: '{{ trigger.event.data.path }}'
          camera: >-
            {%- set camera ={"/home/camera/C1_00626E615161/snap": "recibidor",
                             "/home/camera/FI9853EP_00626E563E69/snap": "piscina",
                             "/home/camera/FI9900P_00626E6D21B2/snap": "barbacoa",
                             "/home/camera/C1_00626E8305E1/snap": "caseta",
                             "/home/camera/WVC54CGA/snap": "ph"}
             -%}
            {{ camera[trigger.event.data.folder] }}

# Notify living room motion sensor tampering
- alias: 'Notify living room motion sensor tampering'
  trigger: 
    platform: state
    entity_id: binary_sensor.salon_detector_movimiento_sabotaje
    to: 'on'
  action:
    service: notify.telegram
    data:
      message: 'El sensor de movimento del salón se ha manipulado'

# Notify Toyota movement if I'm not in the car
- alias: 'Notify Toyota movement if I am not in the car'
  trigger:
    platform: numeric_state
    entity_id: sensor.toyota_distance_travelled_between_updates
    above: 50
    for:
      seconds: 30
  condition:
    condition: template
    value_template: '{{ states.device_tracker.jordi_combined.state != "En ruta" }}'
  action:
    - service: notify.telegram
      data_template:
        message: 'Movimiento del Toyota de unos {{ sensor.toyota_distance_travelled_between_updates.state }} metros detectado'
    - service: telegram_bot.send_location
      data_template:
        latitude: '{{ states.device_tracker.toyota.attributes.latitude }}'
        longitude: '{{ states.device_tracker.toyota.attributes.longitude }}'
        target: !secret hokusphone_telegram_chat_id

#############################################################
# Light automations
#############################################################

# When turn on outside lights, adjust brightness
- alias: 'Luces exteriores on turn on - Adjust Brightness'
  trigger:
    platform: state
    entity_id: group.external_lights_group
    to: 'on'
  action:
    - service: light.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((states.input_number.entrada_luz_brillo.state | int) * 255) // 100 }}'

# Adjust luces exteriores brightness
- alias: 'Luces exteriores - Adjust Brightness'
  trigger:
    platform: state
    entity_id: input_number.entrada_luz_brillo
  condition:
    condition: state
    entity_id: group.external_lights_group
    state: 'on'
  action:
    - service: light.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((trigger.to_state.state | int) * 255) // 100 }}'

# Turn on outside lights at sunset (+15 minutes)
- alias: 'Sunset Lights'
  trigger:
    platform: sun
    event: 'sunset'
    offset: '00:15:00'
  action:
    - service: light.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((states.input_number.entrada_luz_brillo.state | int) * 255) // 100 }}'

# Turn off outside lights at night (at 00:15)
- alias: 'Turn off lights at night'
  trigger:
    platform: time
    at: '00:15'
  condition:
    condition: state
    entity_id: group.external_lights_group
    state: 'on'
  action:
    service: light.turn_off
    entity_id: group.external_lights_group
  
# When the outside lights have been turned on at late night (later than 00:15) and before sunrise, turn them off after 5 minutes
- alias: 'Turn off lights at late night'
  trigger:
    platform: state
    entity_id: group.external_lights_group
    to: 'on'
  condition:
    - condition: time
      after: '00:15'
    - condition: sun
      before: sunrise
    - condition: state
      entity_id: group.external_lights_group
      state: 'on'
  action:
    - delay:
        minutes: 5
    - service: light.turn_off
      data:
        entity_id: group.external_lights_group

# Turn off outside lights after 10 seconds when the sun is not set
- alias: 'Turn off lights when sun not set'
  trigger:
    platform: state
    entity_id: group.external_lights_group
    to: 'on'
  condition:
    - condition: sun
      after: sunrise
    - condition: sun
      before: sunset
  action:
    - delay:
        seconds: 10
    - service: light.turn_off
      data:
        entity_id: group.external_lights_group

# Turn on outside lights when fence is opened and the sun is set.
- alias: 'Turn on lights when fence open'
  trigger:
    platform: state
    entity_id: sensor.switch_barrera
    to: 'Abierta'
  condition:
    condition: or
    conditions:
    - condition: sun
      after: sunset
    - condition: sun
      before: sunrise
  action:
    - service: light.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((states.input_number.entrada_luz_brillo.state | int) * 255) // 100 }}'

# Turn on hall lamp when the sun is set and someone at home
- alias: 'Turn on hall lamp when the sun is set and someone at home'
  trigger:
    platform: sun
    event: sunset
  condition:
    condition: state
    entity_id: group.unidad_familiar
    state: 'home'
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.swiid_swiidinter_lampara_recibidor_switch

#############################################################
# Power automations
#############################################################

# Notify when a power cut longer than 1 minute detected
- alias: 'Notify power cut'
  trigger:
    platform: state
    entity_id: binary_sensor.ups_status_bs
    to: 'off'
    for:
      minutes: 1
  action:
    - service: notify.telegram
      data:
        message: 'Corte en el suministro eléctrico detectado'

# Restart UPS driver controller when a power cut is detected.
# I've added this automation because from time to time the controller stops working until it's restarted.
- alias: 'Restart UPS Driver Controller'
  trigger:
    platform: state
    entity_id: binary_sensor.ups_status_bs
    to: 'off'
  condition:
    - condition: numeric_state
      entity_id: sensor.ha_runtime_in_minutes
      above: 2
  action:
    - service: notify.telegram
      data:
        message: 'Controlador SAI reiniciado'
    - service: shell_command.restart_ups_driver_controller

# Notify when the power is back normal
- alias: 'Notify power ok'
  trigger:
    platform: state
    entity_id: binary_sensor.ups_status_bs
    to: 'on'
  condition:
    - condition: numeric_state
      entity_id: sensor.ha_runtime_in_minutes
      above: 2
  action:
    service: notify.telegram
    data:
      message: 'Suministro eléctrico reestablecido'

# Notify when the UPS battery has to be replaced
- alias: 'Notify ups battery replacement'
  trigger:
    platform: state
    entity_id: sensor.ups_status
    to: 'Reemplazar batería'
  action:
    service: notify.telegram
    data:
      message: 'Batería del SAI agotándose, reemplazar'

#############################################################
# Fence automations
#############################################################
- alias: 'When fence open notify every 10 minutes'
  trigger:
    platform: time
    minutes: '/1'
    seconds: 00
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.switch_barrera
        state: 'Abierta'
      - condition: template
        value_template: '{{ ((as_timestamp(now()) - as_timestamp(states.sensor.switch_barrera.last_changed))//60)%10 == 0 }}'
      - condition: template
        value_template: '{{ ((as_timestamp(now()) - as_timestamp(states.sensor.switch_barrera.last_changed))//60) != 0 }}'
  action:
    - service: script.turn_on
      data:
        entity_id: script.set_tts_volume_level
    - service: tts.google_say
      entity_id: media_player.homeassistant
      data_template:
        message: 'Barrera {{ states.sensor.switch_barrera.state }} durante más de {{ (as_timestamp(now()) - as_timestamp(states.sensor.switch_barrera.last_changed))|int//60 }} minutos'
        cache: false
    - service: telegram_bot.send_message
      data_template:
        message: 'Barrera {{ states.sensor.switch_barrera.state }} durante más de {{ (as_timestamp(now()) - as_timestamp(states.sensor.switch_barrera.last_changed))|int//60 }} minutos'
        target: 
          - !secret hokusphone_telegram_chat_id
          - !secret geniphone_telegram_chat_id
        inline_keyboard: 
          - 'Cerrar:/script.turn_on#script.close_fence'

#############################################################
# Laundry door automations
#############################################################
- alias: 'When laundry door is open and heating is on, notify every 10 minutes'
  trigger:
    platform: time
    minutes: '/1'
    seconds: 00
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.coladuria_sensor_puerta
        state: 'Abierta'
      - condition: state
        entity_id: switch.termostato
        state: 'on'
      - condition: template
        value_template: '{{ ((as_timestamp(now()) - as_timestamp(states.sensor.coladuria_sensor_puerta.last_changed))//60)%10 == 0 }}'
      - condition: template
        value_template: '{{ ((as_timestamp(now()) - as_timestamp(states.sensor.coladuria_sensor_puerta.last_changed))//60) != 0 }}'
  action:
    - service: script.turn_on
      data:
        entity_id: script.set_tts_volume_level
    - service: tts.google_say
      entity_id: media_player.homeassistant
      data_template:
        message: 'Puerta de la coladuría {{ states.sensor.coladuria_sensor_puerta.state }} durante más de {{ (as_timestamp(now()) - as_timestamp(states.sensor.switch_barrera.last_changed))|int//60 }} minutos'
        cache: false

#############################################################
# Turn on and off Swimming pool based on water temperature
# and the valley price of electricity
#############################################################

- alias: 'Turn on swimming pool'
  trigger: 
    platform: template
    value_template: '{{states.sensor.date__time.state == states.sensor.piscina_on_time.state}}'
  action:
    service: switch.turn_on
    entity_id: switch.motor_piscina

- alias: 'Turn off swimming pool'
  trigger: 
    platform: template
    value_template: '{{states.sensor.date__time.state == states.sensor.piscina_off_time.state}}'
  action:
    service: switch.turn_off
    entity_id: switch.motor_piscina

- alias: 'Notify when swimming pool pump on more than 6 hours [Spring - Autumn - Winter]'
  trigger:
    platform: numeric_state
    entity_id: sensor.piscina_on_history
    above: 6
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: 'switch.motor_piscina'
        state: 'on'
      - condition: or
        conditions:
        - condition: state
          entity_id: sensor.season
          state: 'spring'
        - condition: state
          entity_id: sensor.season
          state: 'autumn'
        - condition: state
          entity_id: sensor.season
          state: 'winter'
  action:
    service: telegram_bot.send_message
    data:
      message: 'Motor piscina encendido hoy durante más de 6 horas'
      inline_keyboard: 
        - 'Apagar:/homeassistant.turn_off#switch.motor_piscina'

- alias: 'Notify when swimming pool pump on more than 9 hours [Summer]'
  trigger:
    platform: numeric_state
    entity_id: sensor.piscina_on_history
    above: 9
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: 'switch.motor_piscina'
        state: 'on'
      - condition: state
        entity_id: sensor.season
        state: 'summer'
  action:
    service: telegram_bot.send_message
    data:
      message: 'Motor piscina encendido hoy durante más de 9 horas'
      inline_keyboard: 
        - 'Apagar:/homeassistant.turn_off#switch.motor_piscina'
#############################################################
# Other automations
#############################################################

- alias: 'Notify bitcoin price above threshold'
  trigger:
    platform: numeric_state
    entity_id: sensor.exchange_rate_1_btc
    above: 50000
  action:
    service: notify.telegram
    data_template:
      message: 'Bitcoin ha llegado a un valor de {{states.sensor.exchange_rate_1_btc.state}} {{states.sensor.exchange_rate_1_btc.attributes.unit_of_measurement}}'

- alias: 'Notify for every new device'
  trigger:
    platform: event
    event_type: device_tracker_new_device
  action:
    - service: notify.telegram
      data_template:
        message: 'Nuevo dispositivo encontrado {{ trigger.event.data }}'

- alias: 'Update Notification'
  trigger:
    - platform: state
      entity_id: updater.updater
  action:
    - service: notify.telegram
      data_template:
        message: 'Nueva versión {{ states.updater.updater.state }} de Home Assistant disponible.'

#############################################################
# Nodon Octan automations
#############################################################
- alias: Nodon Octan button 1 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 10
  action:
    - service: script.turn_on
      data:
        entity_id: script.leave_home

- alias: Nodon Octan button 2 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 20
  action:
    - service: script.turn_on
      data:
        entity_id: script.parte_meteorologico_corto

#- alias: Nodon Octan button 2 long press
#  trigger:
#    platform: event
#    event_type: zwave.scene_activated
#    event_data:
#      entity_id: zwave.nodon_crc3100_octan_remote
#      scene_id: 21
#  action:
#    - service: script.turn_on
#      data:
#        entity_id: script.parte_meteorologico

- alias: Nodon Octan button 2 double click
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 23
  action:
    - service: script.turn_on
      data:
        entity_id: script.parte_meteorologico

- alias: Nodon Octan button 3 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 30
  action:
    - service: switch.turn_off
      data:
        entity_id: group.luces_interiores

- alias: Nodon Octan button 4 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 40
  action:
    - service: script.turn_on
      data:
        entity_id: script.goto_sleep

- alias: Nodon Octan button 4 long press
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 41
  action:
    - service: script.turn_on
      data:
        entity_id: script.jordi_at_home

- alias: Nodon Octan button 4 double click
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 43
  action:
    - service: script.turn_on
      data:
        entity_id: script.set_virtual_device_home

#############################################################
# Telegram automations
#############################################################
- alias: 'Telegram bot that authorizes a person for x mins'
  hide_entity: true
  trigger:
    - platform: event
      event_type: telegram_callback
      event_data:
        data: '/30_mins'
    - platform: event
      event_type: telegram_callback
      event_data:
        data: '/60_mins'
    - platform: event
      event_type: telegram_callback
      event_data:
        data: '/120_mins'
    - platform: event
      event_type: telegram_callback
      event_data:
        data: '/180_mins'
  action:
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: '{{ trigger.event.data.id }}'
        message: 'Respuesta recibida!'
        show_alert: false
    # Remove buttons from original message
    - service: telegram_bot.edit_caption
      data_template:
             message_id: '{{ trigger.event.data.message.message_id }}'
             chat_id: '{{ trigger.event.data.chat_id }}'
             caption: '{{ trigger.event.data.message.caption }}'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.empty_home_activation_delay_minutes
        value: '{{ trigger.event.data.data[1:-5] }}'
    - service: homeassistant.turn_on
      data:
        entity_id: input_boolean.empty_home_activation_delay

# Telegram bot that executes a service from a callback with the format <service>#<entity_id>. i.e.: script.turn_on#script.close_fence
# It also removes the buttons from original message.
- alias: 'Telegram bot that executes a service'
  hide_entity: true
  trigger:
    - platform: event
      event_type: telegram_callback
  action:
    # Respond to callback
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: '{{ trigger.event.data.id }}'
        message: 'Respuesta recibida!'
        show_alert: false
    # Remove buttons from original message.
    # Try to use both services 'edit_message' and 'edit_caption'
    # one of them will silently fail but the other should remove the buttons.
    - service: telegram_bot.edit_message
      data_template:
             message_id: '{{ trigger.event.data.message.message_id }}'
             chat_id: '{{ trigger.event.data.chat_id }}'
             message: '{{ trigger.event.data.message.text }}'
             inline_keyboard:
               - 'Armar alarma:/script.turn_on#script.alarm_arm_away'
               - 'Activar todos los sensores:/homeassistant.turn_on#group.seguridad'
    - service: telegram_bot.edit_caption
      data_template:
             message_id: '{{ trigger.event.data.message.message_id }}'
             chat_id: '{{ trigger.event.data.chat_id }}'
             caption: '{{ trigger.event.data.message.caption }}'
             inline_keyboard:
               - 'Armar alarma:/script.turn_on#script.alarm_arm_away'
               - 'Activar todos los sensores:/homeassistant.turn_on#group.seguridad'
    # Execute service with the format <service>#<entity_id>.
    # If the service or the entity id don't exist, the execution will silently fail
    - service_template: >
        {%- if trigger.event.data.data.find("#") != -1 -%}
          {{trigger.event.data.data[1:trigger.event.data.data.find("#")]}}
        {%- endif -%}

      data_template:
        entity_id: '{{trigger.event.data.data[trigger.event.data.data.find("#")+1:]}}'
#############################################################
# Swarm automations
#############################################################

## Check in at school
#- alias: 'Checkin at Colegio'
#  trigger:
#    platform: zone
#    entity_id: device_tracker.jordi_combined
#    zone: zone.colegio
#    event: enter
#  action:
#    service: foursquare.checkin
#    data:
#      venueId: !secret foursquare_colegio_venue_id
## Check in at oficina
#- alias: 'Checkin at Oficina'
#  trigger:
#    platform: zone
#    entity_id: device_tracker.jordi_combined
#    zone: zone.colegio
#    event: enter
#  action:
#    service: foursquare.checkin
#    data:
#      venueId: !secret foursquare_office_venue_id
