#############################################################
# Presence automations
#############################################################

# Empty home automation when no one of the Familia group is at home
- alias: 'Empty home'
  trigger:
    platform: state
    entity_id: group.unidad_familiar
    to: 'not_home'
  action:
    - service: script.turn_on
      data:
        entity_id: script.empty_home

# Someone home automation when someone of the Familia group is at home
- alias: 'Someone home'
  trigger:
    platform: state
    entity_id: group.unidad_familiar
    to: 'home'
  action:
    - service: script.turn_on
      data:
        entity_id: script.someone_home

# Turn on hall lamp when someone at home and the sun is set
- alias: 'Turn on hall lamp when someone at home and the sun is set'
  trigger:
    platform: state
    entity_id: group.unidad_familiar
    to: 'home'
  condition:
    condition: sun
    after: sunset
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.swiid_swiidinter_lampara_recibidor_switch

# When input_boolean.empty_home_activation_delay turns on,
# Change virtual_device location to home
# Wait the specified amount of minutes 
# Turn off input_boolean.empty_home_activation_delay
- alias: 'empty_home_activation_delay on'
  trigger:
    platform: state
    entity_id: input_boolean.empty_home_activation_delay
    to: 'on'
  action:
    - service: device_tracker.see
      data:
        dev_id: 'virtual_device'
        location_name: 'home'
    - service: notify.telegram
      data_template:
        message: >
          Activada persona autorizada durante {{ (states.input_number.empty_home_activation_delay_minutes.state | int) // 60 }} hora(s) y {{ (states.input_number.empty_home_activation_delay_minutes.state | int) % 60 }} minutos
    - delay: '{{ (states.input_number.empty_home_activation_delay_minutes.state | int) // 60 }}:{{ (states.input_number.empty_home_activation_delay_minutes.state | int) % 60 }}'
    - service: homeassistant.turn_off
      data:
        entity_id: input_boolean.empty_home_activation_delay

# When input_boolean.empty_home_activation_delay turns off,
# Change virtual_device location to not_home
- alias: 'empty_home_activation_delay off'
  trigger:
    platform: state
    entity_id: input_boolean.empty_home_activation_delay
    to: 'off'
  action:
    - service: device_tracker.see
      data:
        dev_id: 'virtual_device'
        location_name: 'not_home'

# Turn on for 4 hours authorized person at 7:00 if it's a workday and the shift in calendar is "Mañana" or "Saliente"
- alias: 'Authorized person'
  trigger:
    platform: time
    at: '07:00:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: 'binary_sensor.workday_sensor'
        state: 'on'
      - condition: or
        conditions:
        - condition: state
          entity_id: 'calendar.turnos_geni_manyana'
          state: 'on'
        - condition: state
          entity_id: 'calendar.turnos_geni_saliente'
          state: 'on'
  action:
    - service: input_number.set_value
      data:
        entity_id: input_number.empty_home_activation_delay_minutes
        value: 240.0
    - service: homeassistant.turn_on
      data:
        entity_id: input_boolean.empty_home_activation_delay

#############################################################
# Presence automations - Geni
#############################################################

# When some related entities (device_tracker.geniphone_nmap, device_tracker.geniphone_wifi, device_tracker.geniphone_ibeacon) changes its state:
# Set Geni to 'En ruta' is ibeacon is not 'home' and don't have the 'not_detected' value.
# Set Geni to 'home' when at least ONE of related entities are set to 'home'
# Set Geni to 'not_home' when ALL related entities are in a state different from home and not driving
# Set Geni to the WiFi name
- alias: 'Geni location'
  trigger:
    - platform: state
      entity_id: device_tracker.geniphone_nmap, device_tracker.geniphone_wifi, device_tracker.geniphone_ibeacon
    - platform: homeassistant
      event: start
  action:
    - service: device_tracker.see
      data_template:
        dev_id: 'geni_combined'
        location_name: >
          {%- if not(is_state('device_tracker.geniphone_ibeacon', 'home')) and not(is_state('device_tracker.geniphone_ibeacon', 'not_detected'))-%}
            {{ states.device_tracker.geniphone_ibeacon.state }}
          {%- else -%}
            {%- if is_state('device_tracker.geniphone_nmap', 'home') or is_state('device_tracker.geniphone_wifi', 'home') or is_state('device_tracker.geniphone_ibeacon', 'home')-%}
              home
            {%- else -%}
              {%- if is_state('device_tracker.geniphone_nmap', 'not_home') and is_state('device_tracker.geniphone_wifi', 'not_connected') and is_state('device_tracker.geniphone_ibeacon', 'not_detected')-%}
                not_home
              {%- else -%}
                {{ states.device_tracker.geniphone_wifi.state }}
              {%- endif -%}
            {%- endif -%}
          {%- endif -%}

# If fence is closed, Nissan enter 'home' zone and Geni is 'En Ruta'
# Open fence, notify it and set Geni as 'home'
- alias: 'Geni arriving home'
  trigger:
     - platform: zone
       entity_id: device_tracker.nissan
       zone: zone.home
       event: enter
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.switch_barrera
        state: 'Cerrada'
      - condition: state
        entity_id: device_tracker.geni_combined
        state: 'En ruta'
  action:
    - service: switch.turn_on
      entity_id: switch.barrera
      data_template:
        message: 'Barrera abierta automáticamente para Geni'
        inline_keyboard: 
          - 'Cerrar:/script.turn_on#script.close_fence'
    - delay:
        seconds: 5
    - service: device_tracker.see
      data:
        dev_id: 'geni_combined'
        location_name: 'home'

#############################################################
# Presence automations - Jordi
#############################################################

# When some related entities (device_tracker.hokusphone_nmap, device_tracker.hokusphone_wifi, device_tracker.hokusphone_ibeacon) changes its state:
# Set Jordi to 'En ruta' if ibeacon is not 'home' and don't have the 'not_detected' value.
# Set Jordi to 'home' when at least ONE of related entities are set to 'home'
# Set Jordi to 'not_home' when ALL related entities are in a state different from home and not driving
# Set Jordi to the WiFi name
- alias: 'Jordi location'
  trigger:
    - platform: state
      entity_id: device_tracker.hokusphone_nmap, device_tracker.hokusphone_wifi, device_tracker.hokusphone_ibeacon
    - platform: homeassistant
      event: start
  action:
    - service: device_tracker.see
      data_template:
        dev_id: 'jordi_combined'
        location_name: >
          {%- if not(is_state('device_tracker.hokusphone_ibeacon', 'home')) and not(is_state('device_tracker.hokusphone_ibeacon', 'not_detected'))-%}
            {{ states.device_tracker.hokusphone_ibeacon.state }}
          {%- else -%}
            {%- if is_state('device_tracker.hokusphone_nmap', 'home') or is_state('device_tracker.hokusphone_wifi', 'home') or is_state('device_tracker.hokusphone_ibeacon', 'home')-%}
              home
            {%- else -%}
              {%- if is_state('device_tracker.hokusphone_nmap', 'not_home') and is_state('device_tracker.hokusphone_wifi', 'not_connected') and is_state('device_tracker.hokusphone_ibeacon', 'not_detected')-%}
                not_home
              {%- else -%}
                {{ states.device_tracker.hokusphone_wifi.state }}
              {%- endif -%}
            {%- endif -%}
          {%- endif -%}

# If fence is closed, Toyota enter 'home' zone and Jordi is 'En Ruta'
# Open fence, notify it, send a meessage to mqtt topic, and set Jordi as 'home'
- alias: 'Jordi arriving home'
  trigger:
     - platform: zone
       entity_id: device_tracker.toyota
       zone: zone.home
       event: enter
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.switch_barrera
        state: 'Cerrada'
      - condition: state
        entity_id: device_tracker.jordi_combined
        state: 'En ruta'
  action:
    - service: switch.turn_on
      entity_id: switch.barrera
    - service: mqtt.publish
      data:
        payload_template: >
          He abierto la barrera. {%- if is_state("device_tracker.geni_combined", "home") -%}Jeni está en casa. {%- else -%}Es posible que Jeni no esté en casa.{%- endif -%}
        retain: false
        topic: 'device/carphone/say'
    - delay:
        seconds: 5
    - service: telegram_bot.send_message
      data_template:
        message: 'Barrera abierta automáticamente'
        target: !secret hokusphone_telegram_chat_id
        inline_keyboard: 
          - 'Cerrar:/script.turn_on#script.close_fence'
    - service: device_tracker.see
      data:
        dev_id: 'jordi_combined'
        location_name: 'home'

# When Jordi leave home zone and in the car:
#   - Set hokusphone nmap 'not_home'
#   - If nobody at home, close the fence if open, and notify if porch door or blind is open.
- alias: 'Jordi leaving home with car'
  trigger:
     - platform: zone
       entity_id: device_tracker.toyota
       zone: zone.home
       event: leave
  condition:
    - condition: state
      entity_id: device_tracker.jordi_combined
      state: 'En ruta'
  action:
    - service: device_tracker.see
      data:
        dev_id: 'hokusphone_nmap'
        location_name: 'not_home'
    - service: mqtt.publish
      data:
        payload_template: >
          {%- if is_state("group.unidad_familiar", "not_home") -%}{%- if is_state("sensor.switch_barrera", "Abierta") -%}Te has dejado la barrera abierta, la voy a cerrar. {%- endif -%}{%- if is_state("sensor.cocina_sensor_puerta", "Abierta") %}Puerta de la cocina abierta. {% endif -%}{%- if is_state("sensor.cocina_sensor_persiana", "Abierta") %}Persiana de la cocina abierta. {% endif -%}{%- endif -%}La previsión del tiempo es de {{ states.sensor.pws_weather_1d_metric.state | replace(" C."," grados") }}
        retain: false
        topic: 'device/carphone/say'
    - service_template: >
        {%- if is_state("group.unidad_familiar", "not_home") -%}
          {%- if is_state("sensor.switch_barrera", "Abierta") -%}
            homeassistant.turn_on
          {%- endif -%}
        {%- endif -%}

      data:
        entity_id: switch.barrera

# Close fence if open when close-fence HTML5 push notification action button clicked
- alias: 'close-fence HTML5 push notification action button clicked'
  trigger:
    platform: event
    event_type: html5_notification.clicked
    event_data:
     action: close-fence
  condition:
    - condition: state
      entity_id: sensor.switch_barrera
      state: 'Abierta'
  action:
    - service: switch.turn_on
      entity_id: switch.barrera

#############################################################
# Heating automations
#############################################################

# When the switch.termostato changes to on
- alias: 'Heating on'
  trigger:
    platform: state
    entity_id: switch.termostato
    to: 'on'
  action:
    # Turn on thermostat
    - service: script.turn_on
      entity_id: script.power_on_thermostat

# When the switch.termostato changes to off
- alias: 'Heating off'
  trigger:
    platform: state
    entity_id: switch.termostato
    to: 'off'
  action:
    # Turn off thermostat
    - service: script.turn_on
      entity_id: script.power_off_thermostat

# When average temp on ground floor or first floor is under target climate temperature
# If:
#  - There is someone at home
#  - Heating is connected
#  - Heating is idle
#  - Temperature trend in ground floor or first floor is going down
# Then turn on temperature by setting target temperature to 23 degrees
- alias: 'Heating comfort'
  trigger:
    platform: state
    entity_id: binary_sensor.comfort_state
    to: 'on'
  condition:
    - condition: time
      after: '16:00'
  action:
  - service: telegram_bot.send_message
    data_template:
      message: > 
        Calefacción encendida para mejorar el confort
        
        Temperatura objetivo: {{ states.climate.termostato.attributes.temperature }}
        
        Temperatura media planta baja: {{states.sensor.temperature_ground_floor.state}}
        
        Temperatura media primera planta: {{states.sensor.temperature_first_floor.state}}
        
        Ocupación: {{states.group.unidad_familiar.state}}
        
        Estado calefacción: {{states.switch.termostato.state}}
        
        Modo ausente: {{states.switch.termostato_modo_ausente.state}}
        
        Estado termostato: {{states.climate.termostato.attributes.operation_mode}}
        
        Tendencia temperatura planta baja: {{states.sensor.planta_baja_temperatura_tendencia.state}}
        
        Tendencia temperatura primera planta: {{states.sensor.primera_planta_temperatura_tendencia.state}}

      inline_keyboard: 
        - 'Desconectar:/script.turn_on#script.comfort_mode_off'

  - delay:
      seconds: 30
  - service: climate.set_temperature
    data_template:
      entity_id: climate.termostato
      temperature: 23

#############################################################
# Holiday automations
#############################################################

# Enters on holiday mode based on google calendar event
- alias: 'Calendar holiday mode'
  trigger:
    platform: state
    entity_id: calendar.holiday_mode
    from: 'off'
    to: 'on'
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.holiday

# Exits on holiday mode based on google calendar event
- alias: 'Calendar holiday mode exit'
  trigger:
    platform: state
    entity_id: calendar.holiday_mode
    from: 'on'
    to: 'off'
  action:
    - service: switch.turn_off
      data:
        entity_id: switch.holiday

# Enters holiday mode based on switch
- alias: 'Switch holiday mode'
  trigger:
    platform: state
    entity_id: switch.holiday
    from: 'off'
    to: 'on'
  condition:
    condition: state
    entity_id: switch.termostato
    state: 'on'
  action:
    # Turn off thermostat
    - service: script.turn_on
      entity_id: script.power_off_thermostat
    - service: notify.telegram
      data:
        message: 'Modo vacaciones activado'

# Exits holiday mode based on switch
- alias: 'Exit holiday mode'
  trigger:
    platform: state
    entity_id: switch.holiday
    from: 'on'
    to: 'off'
  condition:
    condition: state
    entity_id: switch.termostato
    state: 'on'
  action:
    # Turn on thermostat an set it to away mode
    - service: climate.set_away_mode
      entity_id: climate.termostato
      data:
        away_mode: true
    - service: notify.telegram
      data:
        message: 'Modo vacaciones desactivado'

#############################################################
# Alarm automations
#############################################################

# Disable alarm for recibidor after 30 seconds of detection
- alias: 'Disable alarm for recibidor'
  trigger:
    platform: state
    entity_id: binary_sensor.recibidor_camara_det_mov
    to: 'on'
  action:
    - delay:
        seconds: 30
    - service: mqtt.publish
      data:
        payload: 0
        retain: true
        topic: 'home/camera/recibidor/alarm'

# Disable alarm for piscina after 30 seconds of detection
- alias: 'Disable alarm for piscina'
  trigger:
    platform: state
    entity_id: binary_sensor.piscina_camara_det_mov
    to: 'on'
  action:
    - delay:
        seconds: 30
    - service: mqtt.publish
      data:
        payload: 0
        retain: true
        topic: 'home/camera/piscina/alarm'

# Disable alarm for barbacoa after 30 seconds of detection
- alias: 'Disable alarm for barbacoa'
  trigger:
    platform: state
    entity_id: binary_sensor.barbacoa_camara_det_mov
    to: 'on'
  action:
    - delay:
        seconds: 30
    - service: mqtt.publish
      data:
        payload: 0
        retain: true
        topic: 'home/camera/barbacoa/alarm'

# Disable alarm for caseta after 30 seconds of detection
- alias: 'Disable alarm for caseta'
  trigger:
    platform: state
    entity_id: binary_sensor.caseta_camara_det_mov
    to: 'on'
  action:
    - delay:
        seconds: 30
    - service: mqtt.publish
      data:
        payload: 0
        retain: true
        topic: 'home/camera/caseta/alarm'

# Notify kitchen door opened when notification active
- alias: 'Notify kitchen door opened when notification active'
  trigger: 
    platform: state
    entity_id: sensor.cocina_sensor_puerta
    from: 'Cerrada'
    to: 'Abierta'
  condition:
    condition: state
    entity_id: input_boolean.cocina_sensor_puerta
    state: 'on'
  action:
    service: notify.telegram
    data:
      message: 'Puerta de la cocina abierta'

# Notify kitchen blind opened when notification active
- alias: 'Notify kitchen blind opened when notification active'
  trigger: 
    platform: state
    entity_id: sensor.cocina_sensor_persiana
    from: 'Cerrada'
    to: 'Abierta'
  condition:
    condition: state
    entity_id: input_boolean.cocina_sensor_persiana
    state: 'on'
  action:
    service: notify.telegram
    data:
      message: 'Persiana de la cocina abierta'

- alias: 'Notify laundry door opened when notification active'
  trigger: 
    platform: state
    entity_id: sensor.coladuria_sensor_puerta
    from: 'Cerrada'
    to: 'Abierta'
  condition:
    condition: state
    entity_id: input_boolean.coladuria_sensor_puerta
    state: 'on'
  action:
    service: notify.telegram
    data:
      message: 'Puerta de la coladuria abierta'

# Notify living room motion detection when notification active
- alias: 'Notify living room motion detection when notification active'
  trigger: 
    platform: state
    entity_id: binary_sensor.salon_detector_movimiento
    to: 'ON'
  condition:
    condition: state
    entity_id: input_boolean.salon_detector_movimiento
    state: 'on'
  action:
    service: notify.telegram
    data:
      message: 'Movimiento detectado en el salón'

# Notify living room motion sensor tampering
- alias: 'Notify living room motion sensor tampering'
  trigger: 
    platform: state
    entity_id: binary_sensor.salon_detector_movimiento_sabotaje
    to: 'ON'
  action:
    service: notify.telegram
    data:
      message: 'El sensor de movimento del salón se ha manipulado'

#############################################################
# Light automations
#############################################################

# On turn on outside lights, adjust brightness
- alias: 'Luces exteriores on turn on - Adjust Brightness'
  trigger:
    platform: state
    entity_id: group.luces_exteriores
    to: 'on'
  action:
    - service: light.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((states.input_number.entrada_luz_brillo.state | int) * 255) // 100 }}'

# Adjust luces exteriores brightness
- alias: 'Luces exteriores - Adjust Brightness'
  trigger:
    platform: state
    entity_id: input_number.entrada_luz_brillo
  condition:
    condition: state
    entity_id: group.luces_exteriores
    state: 'on'
  action:
    - service: light.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((trigger.to_state.state | int) * 255) // 100 }}'

# Turn on outside lights at sunset (+15 minutes)
- alias: 'Sunset Lights'
  trigger:
    platform: sun
    event: 'sunset'
    offset: '00:15:00'
  action:
    - service: light.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((states.input_number.entrada_luz_brillo.state | int) * 255) // 100 }}'

# Turn off outside lights at night (at 00:15)
- alias: 'Turn off lights at night'
  trigger:
    platform: time
    at: '00:15'
  condition:
    condition: state
    entity_id: group.luces_exteriores
    state: 'on'
  action:
    service: light.turn_off
    entity_id: group.luces_exteriores
  
# When the outside lights have been turned on at late night (later than 00:15) and before sunrise, turn them off after 5 minutes
- alias: 'Turn off lights at late night'
  trigger:
    platform: state
    entity_id: group.luces_exteriores
    to: 'on'
  condition:
    - condition: time
      after: '00:15'
    - condition: sun
      before: sunrise
    - condition: state
      entity_id: group.luces_exteriores
      state: 'on'
  action:
    - delay:
        minutes: 5
    - service: light.turn_off
      data:
        entity_id: group.luces_exteriores

# Turn off outside lights after 10 seconds when the sun is not set
- alias: 'Turn off lights when sun not set'
  trigger:
    platform: state
    entity_id: group.luces_exteriores
    to: 'on'
  condition:
    - condition: sun
      after: sunrise
    - condition: sun
      before: sunset
  action:
    - delay:
        seconds: 10
    - service: light.turn_off
      data:
        entity_id: group.luces_exteriores

# Turn on outside lights when fence is opened and the sun is set.
- alias: 'Turn on lights when fence open'
  trigger:
    platform: state
    entity_id: sensor.switch_barrera
    to: 'Abierta'
  condition:
    condition: or
    conditions:
    - condition: sun
      after: sunset
    - condition: sun
      before: sunrise
  action:
    - service: light.turn_on
      data_template:
        entity_id: group.luces_exteriores
        brightness: '{{ ((states.input_number.entrada_luz_brillo.state | int) * 255) // 100 }}'

# Turn on hall lamp when the sun is set and someone at home
- alias: 'Turn on hall lamp when the sun is set and someone at home'
  trigger:
    platform: sun
    event: sunset
  condition:
    condition: state
    entity_id: group.unidad_familiar
    state: 'home'
  action:
    - service: switch.turn_on
      data:
        entity_id: switch.swiid_swiidinter_lampara_recibidor_switch

#############################################################
# Power automations
#############################################################

# Notify when a power cut longer than 1 minute detected
- alias: 'Notify power cut'
  trigger:
    platform: state
    entity_id: binary_sensor.ups_status_bs
    to: 'off'
    for:
      minutes: 1
  action:
    - service: notify.telegram
      data:
        message: 'Corte en el suministro eléctrico detectado'

# Restart UPS driver controller when a power cut is detected.
# I've added this automation because from time to time the controller stops working until it's restarted.
- alias: 'Restart UPS Driver Controller'
  trigger:
    platform: state
    entity_id: binary_sensor.ups_status_bs
    to: 'off'
  action:
    - service: notify.telegram
      data:
        message: 'Controlador SAI reiniciado'
    - service: shell_command.restart_ups_driver_controller

# Notify when the power is back normal
- alias: 'Notify power ok'
  trigger:
    platform: state
    entity_id: binary_sensor.ups_status_bs
    to: 'on'
  action:
    service: notify.telegram
    data:
      message: 'Suministro eléctrico reestablecido'

# Notify when the UPS battery has to be replaced
- alias: 'Notify ups battery replacement'
  trigger:
    platform: state
    entity_id: sensor.ups_status
    to: 'Reemplazar batería'
  action:
    service: notify.telegram
    data:
      message: 'Batería del SAI agotándose, reemplazar'

#############################################################
# Fence automations
#############################################################
- alias: 'When fence open notify every 10 minutes'
  trigger:
    platform: time
    minutes: '/1'
    seconds: 00
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.switch_barrera
        state: 'Abierta'
      - condition: template
        value_template: '{{ ((as_timestamp(now()) - as_timestamp(states.sensor.switch_barrera.last_changed))//60)%10 == 0 }}'
      - condition: template
        value_template: '{{ ((as_timestamp(now()) - as_timestamp(states.sensor.switch_barrera.last_changed))//60) != 0 }}'
  action:
    - service: tts.google_say
      entity_id: media_player.homeassistant
      data_template:
        message: 'Barrera {{ states.sensor.switch_barrera.state }} durante más de {{ (as_timestamp(now()) - as_timestamp(states.sensor.switch_barrera.last_changed))|int//60 }} minutos'
        cache: false
    - service: telegram_bot.send_message
      data_template:
        message: 'Barrera {{ states.sensor.switch_barrera.state }} durante más de {{ (as_timestamp(now()) - as_timestamp(states.sensor.switch_barrera.last_changed))|int//60 }} minutos'
        inline_keyboard: 
          - 'Cerrar:/script.turn_on#script.close_fence'

#############################################################
# Turn on and off Swimming pool based on water temperature
# and the valley price of electricity
#############################################################

- alias: 'Turn on swimming pool'
  trigger: 
    platform: template
    value_template: '{{states.sensor.date__time.state == states.sensor.piscina_on_time.state}}'
  action:
    service: switch.turn_on
    entity_id: switch.motor_piscina

- alias: 'Turn off swimming pool'
  trigger: 
    platform: template
    value_template: '{{states.sensor.date__time.state == states.sensor.piscina_off_time.state}}'
  action:
    service: switch.turn_off
    entity_id: switch.motor_piscina

#############################################################
# Swimming pool turn on
# In the morning while Summer, Spring and Autumn at 9:00
# In the morning while Winter at 10:00
# At night while Summer, Spring and Autumn at 23:00
# At night while Winter at 22:00
#############################################################
#- alias: 'Turn on swimming pool pump [Summer, Spring and Autumn / morning]'
#  trigger:
#    platform: time
#    at: '09:00:00'
#  condition:
#    condition: or
#    conditions:
#    - condition: state
#      entity_id: sensor.season
#      state: 'Spring'
#    - condition: state
#      entity_id: sensor.season
#      state: 'Autumn'
#    - condition: state
#      entity_id: sensor.season
#      state: 'Summer'
#  action:
#    service: switch.turn_on
#    entity_id: switch.piscina
#
#- alias: 'Turn on swimming pool pump [Winter / morning]'
#  trigger:
#    platform: time
#    at: '10:00:00'
#  condition:
#    - condition: state
#      entity_id: sensor.season
#      state: 'Winter'
#  action:
#    service: switch.turn_on
#    entity_id: switch.piscina
#
#- alias: 'Turn on swimming pool pump [Summer, Spring and Autumn / night]'
#  trigger:
#    platform: time
#    at: '23:00:00'
#  condition:
#    condition: or
#    conditions:
#    - condition: state
#      entity_id: sensor.season
#      state: 'Spring'
#    - condition: state
#      entity_id: sensor.season
#      state: 'Autumn'
#    - condition: state
#      entity_id: sensor.season
#      state: 'Summer'
#  action:
#    service: switch.turn_on
#    entity_id: switch.piscina
#
#- alias: 'Turn on swimming pool pump [Winter / night]'
#  trigger:
#    platform: time
#    at: '22:00:00'
#  condition:
#    - condition: state
#      entity_id: sensor.season
#      state: 'Winter'
#  action:
#    service: switch.turn_on
#    entity_id: switch.piscina
#
##############################################################
## Swimming pool turn off
## In the morning while Summer at 13:00
## In the morning while Winter, Spring and Autumn at 12:00
## At night while Summer at 3:00
## At night while Winter at 00:00
## At night while Spring and Autumn at 2:00
##############################################################
#- alias: 'Turn off swimming pool pump [morning / Summer]'
#  trigger:
#    platform: time
#    at: '13:00:00'
#  condition:
#    - condition: state
#      entity_id: sensor.season
#      state: 'Summer'
#  action:
#    service: switch.turn_off
#    entity_id: switch.piscina
#
#- alias: 'Turn off swimming pool pump [morning / Winter, Spring and Autumn]'
#  trigger:
#    platform: time
#    at: '12:00:00'
#  condition:
#    condition: or
#    conditions:
#    - condition: state
#      entity_id: sensor.season
#      state: 'Spring'
#    - condition: state
#      entity_id: sensor.season
#      state: 'Autumn'
#    - condition: state
#      entity_id: sensor.season
#      state: 'Winter'
#  action:
#    service: switch.turn_off
#    entity_id: switch.piscina
#
#- alias: 'Turn off swimming pool pump [night / Summer]'
#  trigger:
#    platform: time
#    at: '3:00:00'
#  condition:
#    - condition: state
#      entity_id: sensor.season
#      state: 'Summer'
#  action:
#    service: switch.turn_off
#    entity_id: switch.piscina
#
#- alias: 'Turn off swimming pool pump [night / Winter]'
#  trigger:
#    platform: time
#    at: '23:00:00'
#  condition:
#    - condition: state
#      entity_id: sensor.season
#      state: 'Winter'
#  action:
#    service: switch.turn_off
#    entity_id: switch.piscina
#
#- alias: 'Turn off swimming pool pump [morning / Spring and Autumn]'
#  trigger:
#    platform: time
#    at: '2:00:00'
#  condition:
#    condition: or
#    conditions:
#    - condition: state
#      entity_id: sensor.season
#      state: 'Spring'
#    - condition: state
#      entity_id: sensor.season
#      state: 'Autumn'
#  action:
#    service: switch.turn_off
#    entity_id: switch.piscina

- alias: 'Notify when swimming pool pump on more than 6 hours [Spring - Autumn - Winter]'
  trigger:
    platform: numeric_state
    entity_id: sensor.piscina_on_history
    above: 6
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: sensor.season
      state: 'Spring'
    - condition: state
      entity_id: sensor.season
      state: 'Autumn'
    - condition: state
      entity_id: sensor.season
      state: 'Winter'
  action:
    service: telegram_bot.send_message
    data:
      message: 'Motor piscina encendido hoy durante más de 6 horas'
      inline_keyboard: 
        - 'Apagar:/homeassistant.turn_off#switch.motor_piscina'

- alias: 'Notify when swimming pool pump on more than 8 hours [Summer]'
  trigger:
    platform: numeric_state
    entity_id: sensor.piscina_on_history
    above: 8
  condition:
    - condition: state
      entity_id: sensor.season
      state: 'Summer'
  action:
    service: telegram_bot.send_message
    data:
      message: 'Motor piscina encendido hoy durante más de 8 horas'
      inline_keyboard: 
        - 'Apagar:/homeassistant.turn_off#switch.motor_piscina'
#############################################################
# Other automations
#############################################################

- alias: 'Notify bitcoin price above threshold'
  trigger:
    platform: numeric_state
    entity_id: sensor.exchange_rate_1_btc
    above: 50000
  action:
    service: notify.telegram
    data_template:
      message: 'Bitcoin ha llegado a un valor de {{states.sensor.exchange_rate_1_btc.state}} {{states.sensor.exchange_rate_1_btc.attributes.unit_of_measurement}}'

- alias: 'Notify for every new device'
  trigger:
    platform: event
    event_type: device_tracker_new_device
  action:
    - service: notify.telegram
      data_template:
        message: 'Nuevo dispositivo encontrado {{ trigger.event.data }}'

- alias: 'Update Notification'
  trigger:
    - platform: state
      entity_id: updater.updater
  action:
    - service: notify.telegram
      data_template:
        message: 'Nueva versión {{ states.updater.updater.state }} de Home Assistant disponible.'

#############################################################
# Nodon Octan automations
#############################################################
- alias: Nodon Octan button 1 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 10
  action:
    - service: script.turn_on
      data:
        entity_id: script.leave_home

- alias: Nodon Octan button 2 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 20
  action:
    - service: script.turn_on
      data:
        entity_id: script.parte_meteorologico_corto

#- alias: Nodon Octan button 2 long press
#  trigger:
#    platform: event
#    event_type: zwave.scene_activated
#    event_data:
#      entity_id: zwave.nodon_crc3100_octan_remote
#      scene_id: 21
#  action:
#    - service: script.turn_on
#      data:
#        entity_id: script.parte_meteorologico

- alias: Nodon Octan button 2 double click
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 23
  action:
    - service: script.turn_on
      data:
        entity_id: script.parte_meteorologico

- alias: Nodon Octan button 3 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 30
  action:
    - service: switch.turn_off
      data:
        entity_id: group.luces_interiores

- alias: Nodon Octan button 4 pressed
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data:
      entity_id: zwave.nodon_crc3100_octan_remote
      scene_id: 40
  action:
    - service: script.turn_on
      data:
        entity_id: script.set_virtual_device_home

#############################################################
# Telegram automations
#############################################################
- alias: 'Telegram bot that authorizes a person for x mins'
  hide_entity: true
  trigger:
    - platform: event
      event_type: telegram_callback
      event_data:
        data: '/30_mins'
    - platform: event
      event_type: telegram_callback
      event_data:
        data: '/60_mins'
    - platform: event
      event_type: telegram_callback
      event_data:
        data: '/120_mins'
    - platform: event
      event_type: telegram_callback
      event_data:
        data: '/180_mins'
  action:
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: '{{ trigger.event.data.id }}'
        message: 'Respuesta recibida!'
        show_alert: false
    # Remove buttons from original message
    - service: telegram_bot.edit_caption
      data_template:
             message_id: '{{ trigger.event.data.message.message_id }}'
             chat_id: '{{ trigger.event.data.chat_id }}'
             caption: '{{ trigger.event.data.message.caption }}'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.empty_home_activation_delay_minutes
        value: '{{ trigger.event.data.data[1:-5] }}'
    - service: homeassistant.turn_on
      data:
        entity_id: input_boolean.empty_home_activation_delay

# Telegram bot that executes a service from a callback with the format <service>#<entity_id>. i.e.: script.turn_on#script.close_fence
# It also removes the buttons from original message.
- alias: 'Telegram bot that executes a service'
  hide_entity: true
  trigger:
    - platform: event
      event_type: telegram_callback
  action:
    # Respond to callback
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: '{{ trigger.event.data.id }}'
        message: 'Respuesta recibida!'
        show_alert: false
    # Remove buttons from original message.
    # Try to use both services 'edit_message' and 'edit_caption'
    # one of them will silently fail but the other should remove the buttons.
    - service: telegram_bot.edit_message
      data_template:
             message_id: '{{ trigger.event.data.message.message_id }}'
             chat_id: '{{ trigger.event.data.chat_id }}'
             message: '{{ trigger.event.data.message.text }}'
    - service: telegram_bot.edit_caption
      data_template:
             message_id: '{{ trigger.event.data.message.message_id }}'
             chat_id: '{{ trigger.event.data.chat_id }}'
             caption: '{{ trigger.event.data.message.caption }}'
    # Execute service with the format <service>#<entity_id>.
    # If the service or the entity id don't exist, the execution will silently fail
    - service_template: >
        {%- if trigger.event.data.data.find("#") != -1 -%}
          {{trigger.event.data.data[1:trigger.event.data.data.find("#")]}}
        {%- endif -%}

      data_template:
        entity_id: '{{trigger.event.data.data[trigger.event.data.data.find("#")+1:]}}'
#############################################################
# Swarm automations
#############################################################

## Check in at school
#- alias: 'Checkin at Colegio'
#  trigger:
#    platform: zone
#    entity_id: device_tracker.jordi_combined
#    zone: zone.colegio
#    event: enter
#  action:
#    service: foursquare.checkin
#    data:
#      venueId: !secret foursquare_colegio_venue_id
## Check in at oficina
#- alias: 'Checkin at Oficina'
#  trigger:
#    platform: zone
#    entity_id: device_tracker.jordi_combined
#    zone: zone.colegio
#    event: enter
#  action:
#    service: foursquare.checkin
#    data:
#      venueId: !secret foursquare_office_venue_id
